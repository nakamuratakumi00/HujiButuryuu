@using Macss.ViewModels

<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title</title>    
    @Styles.Render("~/Content/css")

    @RenderSection("Heads", false)
</head>
<body class="menu-body">
    <div class="wrapper">
        <!-- Sidebar Holder -->
        <nav id="sidebar">
            <div class="sidebar-header">
                <h3>業務統合システム</h3>
            </div>
            <ul class="list-unstyled components">

            @{ string subMenu = "SubMenu"; var Menulist = ViewBag.Menu;}
            @if (Menulist.Count != 0)
            {
                    <li><h4><b>@Html.ActionLink("HOME", "Index", "Home", new { area = "" }, new {})</b></h4></li>
            }
            @foreach (MenuViewModels row in Menulist)
            {
                if (row.IsChild)
                {
                    @:<li><a href="#@row.MenuId" data-toggle="collapse" class="@subMenu@row.level"
                    @: aria-expanded="@if (row.IsExpansion) {<text>true</text>} else {<text>false</text>}">@row.MenuName</a>
                    @:<ul class="list-unstyled collapse @if (row.IsExpansion) {<text>in</text>} " id="@row.MenuId"> 
                }
                else
                {
                    if (row.IsTarget)
                    {
                        @:<li>@Html.ActionLink(row.MenuName, row.ActionName, row.ControllerName, new { area = ""}, new { @class = subMenu + row.level.ToString() + " start-up-sc" })</li>
                    }
                    else
                    {
                        @:<li>@Html.ActionLink(row.MenuName, row.ActionName, row.ControllerName, new { area = "" }, new { @class = subMenu + row.level.ToString() })</li>
                    }
                }
                for (int i = 0; i < row.CntUlTag ; i++)
                {
                    @:</ul></li>
                }
            }
            </ul>
        </nav>
        <!-- Page Content Holder -->
        <div id="content" class="col-sm-12">
            <nav class="col-sm-12 navbar2 navbar-default menu-header-adj">
                <div class="container-fluid">
                    <div class="navbar-header">
                        <button type="button" id="sidebarCollapse" class="btn btn-info navbar-btn">
                            <i class="glyphicon glyphicon-align-left"></i>
                            <span>メニュー一覧</span>
                        </button>
                    </div>
                    @Html.Partial("_LoginPartial")
                </div>
            </nav>
            <div class="col-sm-12 navbar2 navbar-default menu-header-adj">
                @RenderBody()
            </div>
        </div>
    </div>

    @Scripts.Render("~/bundles/modernizr")
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/bootstrap")
    @RenderSection("Scripts", false)

    <script type="text/javascript">
        $(document).ready(function () {
            $('#sidebarCollapse').on('click', function () {
                var $sidebar = $('#sidebar');
                $sidebar.css('transition', 'all 0.3s'); @* IE以外は単純にcssファイルで設定すればよい *@
                $sidebar.toggleClass('active');
            });
        });

        $(function () {
            //------------------------
            // return値falseによりキーキャンセル
            //------------------------
            $(document).keydown(function (event) {
                // クリックされたキーのコー
                var keyCode = event.keyCode;
                // Ctrlキーがクリックされたか (true or false)
                var ctrlClick = event.ctrlKey;
                // Altキーがクリックされたか (true or false)
                var altClick = event.altKey;
                // キーイベントが発生した対象のオブジェクト
                var obj = event.target;

                // バックスペースキーを制御する
                if (keyCode == 8) {
                    // テキストボックス／テキストエリアを制御する
                    if ((obj.tagName == "INPUT" && obj.type == "text" || obj.type == "password")
                        || obj.tagName == "TEXTAREA") {
                        // 入力できる場合は制御しない
                        if (!obj.readOnly && !obj.disabled) {
                            return true;
                        }
                    }
                    return false;
                }
            });
        });

        history.pushState(null, null, null);
        $(window).on("popstate", function (event) {
            if (!event.originalEvent.state) {
                history.pushState(null, null, null);
                return;
            }
        });

    </script>

</body>
</html>

