@using Macss.ViewModels
@model AccountViewModel

<style>
    h1, .h1,
    h2, .h2,
    h3, .h3 {
        margin-top: 2px;
        margin-bottom: 0px;
    }

</style>

@section Heads {
    <link href="/Content/details.css" rel="stylesheet" />
}
<div class="row">
    <div class="navbar2 navbar-default"  style="padding-bottom:10px;">

        <h2>
            @(ViewBag.Mode == 0 ?
                  ViewBag.Title = ViewBag.Title + "（新規）" :
                  ViewBag.Title = ViewBag.Title + "（編集）"
            )
        </h2>

        @using (Html.BeginForm("", "Account/Details", FormMethod.Post, htmlAttributes: new { id = "update" }))
        {
            <div>
                @Html.HiddenFor(model => model.Mode, new { Value = ViewBag.Mode })
            </div>
            @Html.AntiForgeryToken()
            <div class="form-horizontal">
                <hr />
                <div>
                    <input type="submit" style="width:50px; height:30px; padding:0; text-align: center;" id='btnUpdate' value="登録" class="btn btn-default" />
                </div>
                <div>
                    @Html.ValidationSummary(true, "", new { @class = "" })
                </div>
                <div class="row" style="line-height: 2">
                    @Html.LabelFor(model => model.AccountId, htmlAttributes: new { @class = "col-md-2 control-label required-item", @id = "lblAccountId" })
                    <div class="col-md-10 text_jp_middle" style="width: 300px">
                        @(ViewBag.Mode == 0 ?
                                                                                                                                    @Html.EditorFor(model => model.AccountId, new { htmlAttributes = new { @class = "form-control", @maxlength = "32", style = "ime-mode: inactive" } }) :
                                                                                                                                    @Html.EditorFor(model => model.AccountId, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", tabindex = "-1", unselectable = "on" } })
                        )
                        @Html.ValidationMessageFor(model => model.AccountId, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="row" style="line-height: 2">
                    @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "col-md-2 control-label", @id = "lblPassword" })
                    <div class="col-md-10 text_jp_middle">
                        <div style="min-width: 280px; display:inline-flex">
                            @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control", @maxlength = "32", style = "min-width: 280px; ime-mode: inactive" } })
                            @Html.ValidationMessageFor(model => model.Password, "", new { htmlAttributes = new { @class = "text-danger" } })
                            @(ViewBag.Mode == 0 ?
                                                                                                                                        @Html.LabelFor(model => model.Password, "", htmlAttributes: new { @class = "", style = "ime-mode: inactive" }) :
                                                                                                                                        @Html.LabelFor(model => model.Password, "　※未入力の場合、更新しない。", htmlAttributes: new { @class = "side-comment", style = "ime-mode: inactive" })
                            )
                        </div>
                    </div>
                </div>
                <div class="row" style="line-height: 2">
                    @Html.LabelFor(model => model.AccountName, htmlAttributes: new { @class = "col-md-2 control-label required-item", @id = "lblAccountName", style = "white-space:nowrap" })
                    <div class="col-md-10" style="width: 150px">
                        @Html.EditorFor(model => model.AccountName, new { htmlAttributes = new { @class = "form-control", @maxlength = "10", style = "ime-mode: active" } })
                        @Html.ValidationMessageFor(model => model.AccountName, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-10 " style="width: 150px">
                        @Html.EditorFor(model => model.AccountNameKana, new { htmlAttributes = new { @class = "form-control", @maxlength = "32", style = "ime-mode: inactive" } })
                        @Html.ValidationMessageFor(model => model.AccountNameKana, "", new { @class = "text-danger" })
                    </div>
                </div>

                @*<div class="row" style="line-height: 2">
            @Html.LabelFor(model => model.AccountName, htmlAttributes: new { @class = "col-md-2 control-label required-item", @id = "lblAccountName", style = "white-space:nowrap" })
            <div class="col-md-10" style="display:inline-flex; width: 300px;">
                @Html.EditorFor(model => model.AccountName, new { htmlAttributes = new { @class = "form-control", @maxlength = "32" } })
                @Html.ValidationMessageFor(model => model.AccountName, "", new { @class = "text-danger" })
                <b class="side-comment" style="padding-left:5px; padding-right:5px"></b>
                @Html.EditorFor(model => model.AccountNameKana, new { htmlAttributes = new { @class = "form-control", @maxlength = "32" } })
                @Html.ValidationMessageFor(model => model.AccountNameKana, "", new { @class = "text-danger" })
            </div>
        </div>*@

                <div class="row" style="line-height: 2">
                    @Html.LabelFor(model => model.BumonCd, htmlAttributes: new { @class = "control-label col-md-2 required-item" })
                    <div class="col-md-10 text_jp_middle" style="width: 380px">
                        @Html.DropDownListFor(model => model.BumonCd, (IEnumerable<SelectListItem>)ViewBag.Bumon
                                        , "", htmlAttributes : new { @class = "form-control" } )
                        @Html.ValidationMessageFor(model => model.BumonCd, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="row" style="line-height: 2">
                    @Html.LabelFor(model => model.BasyoCd, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10 text_jp_middle" style="width: 380px">
                        @Html.DropDownListFor(model => model.BasyoCd, (IEnumerable<SelectListItem>)ViewBag.Basyo
                                        , "", htmlAttributes : new { @class = "form-control" } )
                    </div>
                </div>
                <div class="row" style="line-height: 2">
                    @Html.LabelFor(model => model.GroupCd, htmlAttributes: new { @class = "control-label col-md-2 required-item" })
                    <div class="col-md-10 text_jp_middle" style="width: 300px">
                        @Html.DropDownListFor(model => model.GroupCd, (IEnumerable<SelectListItem>)ViewBag.Group
                                        , "", htmlAttributes : new { @class = "form-control" } )
                        @Html.ValidationMessageFor(model => model.GroupCd, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="row" style="line-height: 2">
                    @Html.LabelFor(model => model.Sdek12, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10" style="width: 50px">
                        @Html.EditorFor(model => model.Sdek12, new { htmlAttributes = new { @class = "form-control", @maxlength = "1", style = "ime-mode: inactive" } })
                        @Html.ValidationMessageFor(model => model.Sdek12, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="row" style="line-height: 2">
                    @Html.LabelFor(model => model.Ctlfl1, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10" style="width: 300px">
                        @Html.DropDownListFor(model => model.Ctlfl1, (IEnumerable<SelectListItem>)ViewBag.Ctlfl
                                        , htmlAttributes : new { @class = "form-control" } )
                        @Html.ValidationMessageFor(model => model.Ctlfl1, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="row" style="line-height: 2">
                    @Html.LabelFor(model => model.Roles, htmlAttributes: new { @class = "col-md-2 control-label required-item", @id = "lblRoleSet" })
                    <div class="col-md-1">
                        <h6><b>＜設定ロール＞</b></h6>
                        @Html.ListBoxFor(model => model.SetRoles, (IEnumerable<SelectListItem>)ViewBag.SetRoles, htmlAttributes: new { @class = "form-control", style = "width: 220px" })

                        @Html.ValidationMessageFor(model => model.SetRoles, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-1" style="width: 50px">
                        <h6 class="small">　</h6>
                        <input type="button" name="add" value="<" class="btn btn-default" onClick="role(1)" style="margin-top: 10px; margin-bottom: 10px;" /><br>
                        <input type="button" name="delete" value=">" class="btn btn-default" onClick="role(0)">
                    </div>
                    <div class="list-size">
                        <h6><b>＜ロール一覧＞</b></h6>
                        @Html.ListBoxFor(model => model.Roles, (IEnumerable<SelectListItem>)ViewBag.Roles, htmlAttributes: new { @class = "form-control", style = "width: 220px" })
                    </div>
                </div>
                <div class="row" style="line-height: 2">
                    @Html.LabelFor(model => model.DeleteFlg, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.CheckBoxFor(model => model.DeleteFlg, new { htmlAttributes = new { @class = "form-control checkbox-inline" } })
                    </div>
                </div>
                <div class="row" style="line-height: 2">
                    @Html.LabelFor(model => model.UserLock, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.CheckBoxFor(model => model.UserLock, new { htmlAttributes = new { @class = "form-control checkbox-inline" } })
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<div id="linkBack">
    @Html.ActionLink("Back to List", "Index")
</div>
<br />
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
    window.onload = function () {

        if ("@ViewBag.Message" != ""){
            alert("@ViewBag.Message");
            window.location.href = '@Url.Action("Details")?id=' + '@Model.AccountId';

        }

        $('#sidebar').toggleClass('active');
    };
    function role(mode) {
        // リストを取得
        var allRole = document.getElementById('Roles').options;
        var setRole = document.getElementById('SetRoles').options;
        var setRoleValList = new Array();
        for (var i = 0; i < setRole.length; i++) {
            setRoleValList.push(setRole[i].text)
        }
        // del
        if (mode == "0") {
            var count = 0;
            var options = [];
            for (var i = 0; i < setRole.length; i++) {
                if (setRole[i].selected == true) {
                } else {
                    var num = setRole[i].value;
                    var roleSelect = setRole[i].text;
                    options[count] = [roleSelect, num]
                    count++;
                }
            }
            sl = document.getElementById('SetRoles');
            while (sl.lastChild) {
                sl.removeChild(sl.lastChild);
            }
            for (var i = 0; i < count; i++) {
                document.getElementById('SetRoles').options[i] = new Option(options[i][0], options[i][1]);
            }
        // add
        } else {
            var count = setRole.length;
            for (var i = 0; i < allRole.length; i++) {
                if (allRole[i].selected == true) {
                    var num = allRole[i].value;
                    var roleSelect = allRole[i].text;
                    // 設定ロールに存在していない場合のみ
                    if (setRoleValList.indexOf(roleSelect) < 0) {
                        document.getElementById('SetRoles').options[count] = new Option(roleSelect, num);
                        count++;
                    }
                }
            }
        }
    }
    $(function () {
        $('#btnUpdate').click(function () {

            if (window.confirm("@Resources.Message.CQ004")) {
                var setRole = document.getElementById('SetRoles').options;
                for (var i = 0; i < setRole.length; i++) {
                    setRole[i].selected = true;
                }
                $('#update').submit();
            }
            else {
                return false;
            }
        });
    });
    $(function () {
        $('#linkBack').click(function () {

            if (window.confirm("@Resources.Message.CQ011")) {
                return true;
            }
            else {
                return false;
            }
        });
    });
    </script>
}
