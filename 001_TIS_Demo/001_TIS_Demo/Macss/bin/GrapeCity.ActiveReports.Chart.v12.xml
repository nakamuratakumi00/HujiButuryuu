<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>GrapeCity.ActiveReports.Chart.v12</name>
  </assembly>
  <members>
    <member name="T:GrapeCity.ActiveReports.Chart.IChartMemberNameProvider">
      <summary>
        <para>ChartMemberNameProviderに名前を提供します。</para>
      </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.IChartMemberNameProvider.GetName(System.Int32)">
      <summary>フィールドに設定される名前を参照します。</summary>
      <returns>フィールドの名前または値がない場合は空の文字列（""）を返します。</returns>
      <param name="i">検索するフィールドのインデックス。</param>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.Alignment">
      <summary>テキスト項目の配置方法を指定します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Alignment.Center">
      <summary>テキスト項目を中央に配置します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Alignment.Top">
      <summary>テキスト項目を上に配置します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Alignment.Bottom">
      <summary>テキスト項目を下に配置します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Alignment.Left">
      <summary>テキスト項目を左に配置します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Alignment.Right">
      <summary>テキスト項目を右に配置します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Alignment.TopLeft">
      <summary>テキスト項目を左上に配置します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Alignment.TopRight">
      <summary>テキスト項目を右上に配置します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Alignment.BottomLeft">
      <summary>テキスト項目を左下に配置します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Alignment.BottomRight">
      <summary>テキスト項目を右下に配置します。</summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.ArrowType">
      <summary>軸線に使用する矢印タイプを指定します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ArrowType.None">
      <summary>矢印タイプを使用しません。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ArrowType.Triangle">
      <summary>三角形を矢印として使用します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ArrowType.Lines">
      <summary>線を使用して矢印を作成します。</summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.AxisType">
      <summary>軸の種類を指定します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.AxisType.Categorical">
      <summary>軸を使用し、カテゴリを設定します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.AxisType.Numerical">
      <summary>数値軸を使用します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.AxisType.Logarithmic">
      <summary>対数軸を使用します。</summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.BarType">
      <summary>使用するバーの種類を指定します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.BarType.Bar">
      <summary>塗りつぶした矩形形状を使用します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.BarType.Cone">
      <summary>円錐形状を使用します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.BarType.Custom">
      <summary>カスタム形状を使用します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.BarType.Cylinder">
      <summary>円柱形状を使用します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.BarType.Pyramid">
      <summary>ピラミッド形状を使用します。</summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.BaseStyle">
      <summary>3Dファンネルチャートまたは3Dピラミッドグラフの円形または四角形の底面描画スタイルを取得または設定します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.BaseStyle.CircularBase">
      <summary>ファンネルまたはピラミッドの底面を円形に描画します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.BaseStyle.SquareBase">
      <summary>ファンネルまたはピラミッドの底面を四角形に描画します。</summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.ChartType">
      <summary>
        <para>グラフの種類を設定するために、系列のTypeプロパティに使用するChartTypeを指定します。</para>
      </summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ChartType.Area">
      <summary>エリアグラフを描画します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ChartType.Area3D">
      <summary>3Dエリアグラフを描画します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ChartType.Bar2D">
      <summary>棒グラフを描画します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ChartType.Bar3D">
      <summary>3D棒グラフを描画します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ChartType.Bezier">
      <summary>ベジェグラフを描画します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ChartType.BezierXY">
      <summary>ベジェXYグラフを描画します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ChartType.BezierXY3D">
      <summary>3DベジェXYグラフを描画します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ChartType.Bezier3D">
      <summary>3Dベジェグラフを描画します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ChartType.Bubble">
      <summary>バブルチャートを描画します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ChartType.BubbleXY">
      <summary>バブルXYチャートを描画します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ChartType.Candle">
      <summary>ローソク足チャートを描画します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ChartType.ClusteredBar">
      <summary>集合棒グラフを描画します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ChartType.Doughnut">
      <summary>ドーナツチャートを描画します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ChartType.Doughnut3D">
      <summary>3Dドーナツチャートを描画します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ChartType.Funnel">
      <summary>ファンネルチャートを描画します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ChartType.Funnel3D">
      <summary>3Dファンネルチャートを描画します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ChartType.Gantt">
      <summary>ガントチャートを描画します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ChartType.Gantt3D">
      <summary>3Dガントチャートを描画します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ChartType.HiLo">
      <summary>HiLoチャートを描画します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ChartType.HiLoOpenClose">
      <summary>HiLoOpenCloseチャートを描画します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ChartType.HorizontalBar">
      <summary>横棒グラフを描画します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ChartType.HorizontalBar3D">
      <summary>3D横棒グラフを描画します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ChartType.Kagi">
      <summary>カギ足チャートを描画します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ChartType.Kagi3D">
      <summary>3Dカギ足チャートを描画します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ChartType.Line">
      <summary>折れ線グラフを描画します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ChartType.Line3D">
      <summary>3D折れ線グラフを描画します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ChartType.LineXY">
      <summary>折れ線XYグラフを描画します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ChartType.LineXY3D">
      <summary>3D折れ線XYグラフを描画します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ChartType.PlotXY">
      <summary>XYプロットグラフを描画します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ChartType.PointAndFigure">
      <summary>ポイント＆フィギュアチャートを描画します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ChartType.Pyramid">
      <summary>ピラミッドグラフを描画します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ChartType.Pyramid3D">
      <summary>3Dピラミッドグラフを描画します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ChartType.Renko">
      <summary>練行足チャートを描画します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ChartType.Renko3D">
      <summary>3D練行足チャートを描画します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ChartType.Scatter">
      <summary>散布図を描画します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ChartType.StackedArea">
      <summary>積層エリアグラフを描画します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ChartType.StackedArea3D">
      <summary>3D積層型エリアグラフを描画します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ChartType.StackedBar">
      <summary>積層棒グラフを描画します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ChartType.StackedBar3D">
      <summary>3D積層棒グラフを描画します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ChartType.StackedArea100Pct">
      <summary>積層エリアグラフ（％）を描画します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ChartType.StackedArea3D100Pct">
      <summary>3D積層型エリアグラフ（％）を描画します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ChartType.StackedBar100Pct">
      <summary>積層棒グラフ（％）を描画します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ChartType.StackedBar3D100Pct">
      <summary>3D積層棒グラフ（％）を描画します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ChartType.ThreeLineBreak">
      <summary>新値三本足チャートを描画します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ChartType.ThreeLineBreak3D">
      <summary>3D新値三本足チャートを描画します。</summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.ColorPalette">
      <summary>使用するカラーパレットを指定します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ColorPalette.None">
      <summary>データはすべて同じティールカラーで描画します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ColorPalette.Default">
      <summary>カスケードと同じカラースキーム。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ColorPalette.Cascade">
      <summary>ディープティールからペールオーキッドまでの８色のカスケード（デフォルト）。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ColorPalette.Springtime">
      <summary>ディープグリーンの春色。ビビッドカラー２色とパステルカラー５色。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ColorPalette.Iceberg">
      <summary>アイスバーグ調のソフトブルーからグレーまでの範囲。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ColorPalette.Confetti">
      <summary>少数の明るいパステルカラー。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ColorPalette.Greens">
      <summary>70年代の冷蔵庫グリーンからエバーグリーンまでのグリーン。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ColorPalette.Berries">
      <summary>ブルーベリーからラズベリーまでの色範囲。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ColorPalette.Autumn">
      <summary>秋のリッチブラウンとゴールド。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ColorPalette.Murphy">
      <summary>渋いグリーン、さび色、ベージュ。</summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.DeviceModes">
      <summary>グラフの描画に使用するデバイス描画モードを指定します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.DeviceModes.None">
      <summary>標準モード。カラーを使用します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.DeviceModes.BlackWhite">
      <summary>ハッチパターンと破線を使用して、色を指定します。</summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.DockType">
      <summary>ドッキング領域を指定します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.DockType.Top">
      <summary>上部にドッキングします。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.DockType.Bottom">
      <summary>下部にドッキングします。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.DockType.Left">
      <summary>左部にドッキングします。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.DockType.Right">
      <summary>右部にドッキングします。</summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.FunnelStyle">
      <summary>データセットポイントのY値がファンネルの幅と高さのどちらを示すかを指定します。デフォルト値はYIsHeightです。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.FunnelStyle.YIsWidth">
      <summary>データセットポイントのY値はファンネルの幅を決定します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.FunnelStyle.YIsHeight">
      <summary>データセットポイントのY値はファンネルの高さを決定します。</summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.LabelsPlacement">
      <summary>データポイントラベルをファンネルチャートまたはピラミッドグラフの左側と右側のどちらに表示するかを指定します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.LabelsPlacement.Left">
      <summary>ラベルをファンネルまたはピラミッドの左側に表示します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.LabelsPlacement.Right">
      <summary>ラベルをファンネルまたはピラミッドの右側に表示します。</summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.LegendMode">
      <summary>凡例を表示するために使用するモードを指定します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.LegendMode.Auto">
      <summary>
        <para>ドーナツ、ファンネル、ピラミッドなどの場合、各データ点ごとに凡例を作成します。その他のグラフ種の場合、系列ごとに凡例を作成します。</para>
      </summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.LegendMode.Series">
      <summary>系列ごとに凡例を作成します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.LegendMode.Points">
      <summary>データ点ごとに凡例を作成します。</summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.LightType">
      <summary>使用する光源の種類を指定します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.LightType.Ambient">
      <summary>
        <para>アンビエント（環境光源）を使用します。これは、平行光源や点光源において "DirectionalLightRatio = 0" を設定した場合に相当します。</para>
      </summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.LightType.InfiniteDirectional">
      <summary>平行光源（太陽光などのように、どの面も常に同じ入射角となる光源）を使用します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.LightType.FiniteDirectional">
      <summary>点光源（ある一点から光が発せられ、面によって光の入射角が異なる光源）を使用します。</summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.MarkerStyle">
      <summary>マーカーの形状を指定します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.MarkerStyle.None">
      <summary>表示する形状はありません。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.MarkerStyle.Point">
      <summary>点形状を表示します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.MarkerStyle.Square">
      <summary>四角形状を表示します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.MarkerStyle.Circle">
      <summary>円形状を表示します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.MarkerStyle.Triangle">
      <summary>三角形状を表示します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.MarkerStyle.InvTriangle">
      <summary>逆三角形状を表示します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.MarkerStyle.Diamond">
      <summary>菱形状を表示します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.MarkerStyle.Pyramid">
      <summary>ピラミッド形状を表示します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.MarkerStyle.Cross">
      <summary>Xのような十字形状を表示します。</summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.StandardAxis">
      <summary>標準軸である軸を指定します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.StandardAxis.AxisX">
      <summary>標準軸はX軸です。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.StandardAxis.AxisX2">
      <summary>標準軸はX2軸です。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.StandardAxis.AxisY">
      <summary>標準軸はY軸です。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.StandardAxis.AxisY2">
      <summary>標準軸はY2軸です。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.StandardAxis.AxisZ">
      <summary>標準軸はZ軸です。</summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.StdLegendMarker">
      <summary>使用する標準の凡例マーカー形状を指定します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.StdLegendMarker.None">
      <summary>使用する形状はありません。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.StdLegendMarker.Line">
      <summary>線を使用します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.StdLegendMarker.Bar">
      <summary>塗りつぶした矩形形状を使用します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.StdLegendMarker.Area">
      <summary>塗りつぶした面形状を使用します。</summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.UICommand">
      <summary>チャートコントロールのDoCommandメソッドに使用するコマンドを指定します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.UICommand.New">
      <summary>新しいグラフを作成します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.UICommand.OpenXml">
      <summary>［ファイルを開く］ダイアログを表示して、グラフをXMLファイルからロードします。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.UICommand.SaveXml">
      <summary>［ファイルの保存］ダイアログを表示して、グラフをXMLファイルに保存します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.UICommand.PrintPreview">
      <summary>グラフの印刷プレビューを表示します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.UICommand.Copy">
      <summary>グラフをクリップボードにコピーします。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.UICommand.Designer">
      <summary>［グラフデザイナ］ダイアログを表示します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.UICommand.Customize">
      <summary>［グラフデザイナ］ダイアログを表示します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.UICommand.Clear">
      <summary>グラフを空の状態に戻します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.UICommand.RefreshData">
      <summary>Refreshes chart data</summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.UIOptions">
      <summary>チャートコントロールのユーザーインタフェース設定を指定します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.UIOptions.None">
      <summary>UIオプションを使用しません。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.UIOptions.ContextCustomize">
      <summary>コンテキストメニューに［カスタマイズ］を追加します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.UIOptions.UseCustomTooltips">
      <summary>System.Windows.Forms.Tooltipの代わりに、コントロールの描画したツールチップを使用できます。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.UIOptions.ForceHitTesting">
      <summary>HitTest関数を使用できます。デフォルトでは、コントロールはマウスイベントハンドラ（またはコンテキストメニューまたはツールチップ）が付加されたオブジェクトのみがヒットテストを通して表示されているように最適化を適用します。</summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.Padding">
      <summary>コントロール内の余白（4辺）を設定するための情報を提供します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Padding.#ctor(System.Int32)">
      <summary>すべての辺に対して同じ値を使用して、Padding構造体の新しいインスタンスを初期化します。</summary>
      <param name="all">
        <list type="termdef">
          <item>
            <description>コントロールの枠（４辺）から文字までの余白幅。</description>
          </item>
        </list>
      </param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Padding.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>各辺に対して指定された値を使用して、Padding構造体の新しいインスタンスを初期化します。</summary>
      <param name="left">コントロールの左辺から文字までの余白幅。</param>
      <param name="top">コントロールの上辺から文字までの余白幅。</param>
      <param name="right">コントロールの右辺から文字までの余白幅。</param>
      <param name="bottom">
        <list type="termdef">
          <item>
            <description>コントロールの下辺から文字までの余白幅。</description>
          </item>
        </list>
        <para>
        </para>
      </param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Padding.GetHashCode">
      <summary>Paddingオブジェクトのハッシュコードを生成します。</summary>
      <returns>このインスタンスのハッシュコードは、ハッシュテーブルのようなハッシュアルゴリズムまたはデータ構造で使用できます。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Padding.Equals(GrapeCity.ActiveReports.Chart.Padding)">
      <summary>現在のPaddingオブジェクトと指定したPaddingExオブジェクトが、等しいかどうかを示す値を返します。</summary>
      <param name="padding">
        <list type="termdef">
          <item>
            <description>現在のPaddingオブジェクトと比較するPaddingオブジェクト。</description>
          </item>
        </list>
      </param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Padding.Equals(System.Object)">
      <summary>現在のPaddingオブジェクトと指定したオブジェクトが、等しいかどうかを示す値を返します。</summary>
      <returns>指定されたSystem.Objectがこのインスタンスと等しい場合はTrue、それ以外の場合はFalse。</returns>
      <param name="obj">
        <list type="termdef">
          <item>
            <description>現在のPaddingオブジェクトと比較するオブジェクト。</description>
          </item>
        </list>
      </param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Padding.op_Equality(GrapeCity.ActiveReports.Chart.Padding,GrapeCity.ActiveReports.Chart.Padding)">
      <summary>指定した2つのPaddingオブジェクトが、等しいかどうかを確認します。</summary>
      <param name="p1">比較対象となる１番目のPaddingオブジェクト。</param>
      <param name="p2">
        <list type="termdef">
          <item>
            <description>比較対象となる２番目のPaddingオブジェクト。</description>
          </item>
        </list>
      </param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Padding.op_Inequality(GrapeCity.ActiveReports.Chart.Padding,GrapeCity.ActiveReports.Chart.Padding)">
      <summary>指定した２つの Paddingオブジェクトが等しくないかどうかを確認します。

<h1 class="heading"><span class="expandcollapse" tabindex="0"><img id="syntaxToggle" class="toggle" name="toggleSwitch" src="dotnetimages/collapse.gif"></img>構文</span></h1></summary>
      <param name="p1">比較対象となる１番目のPaddingオブジェクト。</param>
      <param name="p2">
        <list type="termdef">
          <item>
            <description>比較対象となる２番目のPaddingオブジェクト。</description>
          </item>
        </list>
      </param>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Padding.All">
      <summary>コントロールの余白幅（４辺）を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Padding.Bottom">
      <summary>コントロールの下辺の余白幅を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Padding.Horizontal">
      <summary>コントロールの左辺の余白幅と、右辺の余白幅の合計を取得します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Padding.Left">
      <summary>コントロールの左辺の余白幅を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Padding.Right">
      <summary>コントロールの右辺の余白幅を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Padding.Size">
      <summary>余白情報を System.Drawing.Size 構造体の形式で取得します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Padding.Top">
      <summary>コントロールの上辺の余白幅を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Padding.Vertical">
      <summary>コントロールの上辺の余白幅と、下辺の余白幅の合計を取得します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Padding.Empty">
      <summary>余白なしのPaddingオブジェクトを返します。</summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.AxesCollection">
      <summary>
        <para>軸のコレクションを表します。</para>
        <para>この型のすべてのメンバの一覧については、AxesCollectionメンバを参照してください。</para>
      </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.Axis">
      <summary>
        <para>グラフの軸を表します。</para>
        <para>この型のすべてのメンバの一覧については、Axisメンバを参照してください。</para>
      </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.AxisBase">
      <summary>
        <para>軸のプロパティセットを表します。</para>
        <para>この型のすべてのメンバの一覧については、AxisBaseメンバを参照してください。</para>
      </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.AxisScroll">
      <summary>
        <para>軸上のスクロールバーを表します。</para>
        <para>この型のすべてのメンバの一覧については、AxisScrollメンバを参照してください。</para>
      </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.BackdropItem">
      <summary>
        <para>個別の項目として機能し、マウスイベントを処理する背景を表します。</para>
        <para>この型のすべてのメンバの一覧については、BackdropItemメンバを参照してください。</para>
      </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.Border">
      <summary>
        <para>グラフの境界線の描画に必要な情報を表します。</para>
        <para>この型のすべてのメンバの一覧については、Borderメンバを参照してください。</para>
      </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.BorderSizes">
      <summary>
        <para>矩形領域の周りの境界線のサイズを記述します。</para>
        <para>この型のすべてのメンバの一覧については、BorderSizesメンバを参照してください。</para>
      </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.ChartArea">
      <summary>
        <para>グラフ領域のプロパティを指定します。</para>
        <para>この型のすべてのメンバの一覧については、ChartAreaメンバを参照してください。</para>
      </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.ChartAreasCollection">
      <summary>
        <para>グラフ領域コレクションの設定を指定します。</para>
        <para>この型のすべてのメンバの一覧については、ChartAreasCollectionメンバを参照してください。</para>
      </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.ChartTypeConfig">
      <summary>
        <para>ChartTypeConfigオブジェクトの設定を表します。</para>
        <para>この型のすべてのメンバの一覧については、ChartTypeConfigメンバを参照してください。</para>
      </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.CustomAxis">
      <summary>
        <para>カスタム軸のプロパティを表します。</para>
        <para>この型のすべてのメンバの一覧については、CustomAxisメンバを参照してください。</para>
      </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.CustomDrawEventArgs">
      <summary>
        <para>グラフのカスタム描画イベント引数のプロパティを表します。</para>
        <para>この型のすべてのメンバの一覧については、CustomDrawEventArgsメンバを参照してください。</para>
      </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.CustomProperties">
      <summary>
        <para>グラフのカスタムプロパティのセットを表します。</para>
        <para>この型のすべてのメンバの一覧については、CustomPropertiesメンバを参照してください。</para>
      </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.DataPoint">
      <summary>
        <para>データ点のプロパティセットを表します。</para>
        <para>この型のすべてのメンバの一覧については、DataPointメンバを参照してください。</para>
      </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.DataPointsCollection">
      <summary>
        <para>DataPointsコレクションの設定を指定します。</para>
        <para>この型のすべてのメンバの一覧については、DataPointsCollectionメンバを参照してください。</para>
      </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.DoubleArray">
      <summary>
        <para>DoubleArrayクラスの設定を表します。</para>
        <para>この型のすべてのメンバの一覧については、DoubleArrayメンバを参照してください。</para>
      </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.FontInfo">
      <summary>
        <para>FontInfoクラスの設定を表します。</para>
        <para>この型のすべてのメンバの一覧については、FontInfoメンバを参照してください。</para>
      </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.GraphMouseEventArgs">
      <summary>
        <para>グラフのマウスのイベント引数のプロパティを表します。</para>
        <para>この型のすべてのメンバの一覧については、GraphMouseEventArgsメンバを参照してください。</para>
      </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.GridLayout">
      <summary>
        <para>GridLayoutオブジェクトの設定を表します。</para>
        <para>この型のすべてのメンバの一覧については、GridLayoutメンバを参照してください。</para>
      </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.HitTest">
      <summary>
        <para>HitTestオブジェクトのプロパティを表します。</para>
        <para>この型のすべてのメンバの一覧については、HitTestメンバを参照してください。</para>
      </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.KeyValuePair">
      <summary>
        <para>KeyValuePairオブジェクトの設定を表します。</para>
        <para>この型のすべてのメンバの一覧については、KeyValuePairメンバを参照してください。</para>
      </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.LabelInfo">
      <summary>
        <para>LabelInfoクラスの設定を表します。</para>
        <para>この型のすべてのメンバの一覧については、LabelInfoメンバを参照してください。</para>
      </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.LabelsCollection">
      <summary>
        <para>ラベルコレクションの設定を指定します。</para>
        <para>この型のすべてのメンバの一覧については、LabelsCollectionメンバを参照してください。</para>
      </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.Legend">
      <summary>
        <para>Legendオブジェクトの設定を表します。</para>
        <para>この型のすべてのメンバの一覧については、Legendメンバを参照してください。</para>
      </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.LegendItem">
      <summary>
        <para>LegendItemオブジェクトの設定を表します。</para>
        <para>この型のすべてのメンバの一覧については、LegendItemメンバを参照してください。</para>
      </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.LegendItemsCollection">
      <summary>
        <para>LegendItemsCollectionクラスの設定を表します。</para>
        <para>この型のすべてのメンバの一覧については、LegendItemsCollectionメンバを参照してください。</para>
      </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.LegendsCollection">
      <summary>
        <para>LegendsCollectionクラスの設定を表します。</para>
        <para>この型のすべてのメンバの一覧については、LegendsCollectionメンバを参照してください。</para>
      </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.Light">
      <summary>
        <para>Lightオブジェクトの設定を表します。</para>
        <para>この型のすべてのメンバの一覧については、Lightメンバを参照してください。</para>
      </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.Marker">
      <summary>
        <para>Markerオブジェクトの設定を表します。</para>
        <para>この型のすべてのメンバの一覧については、Markerメンバを参照してください。</para>
      </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.PlaneItem">
      <summary>
        <para>グラフ壁面に使用するPlaneItemオブジェクトの設定を表します。</para>
        <para>この型のすべてのメンバの一覧については、PlaneItemメンバを参照してください。</para>
      </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.Projection">
      <summary>
        <para>幾何学的図形のProjectionオブジェクトの設定を表します。</para>
        <para>この型のすべてのメンバの一覧については、Projectionメンバを参照してください。</para>
      </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.Series">
      <summary>
        <para>Seriesオブジェクトの設定を表します。</para>
        <para>この型のすべてのメンバの一覧については、Seriesメンバを参照してください。</para>
      </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.SeriesCollection">
      <summary>
        <para>SeriesCollectionクラスの設定を表します。</para>
        <para>この型のすべてのメンバの一覧については、SeriesCollectionメンバを参照してください。</para>
      </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.SharpGraph">
      <summary>
        <para>SharpGraphオブジェクトの設定を表します。</para>
        <para>この型のすべてのメンバの一覧については、SharpGraphメンバを参照してください。</para>
      </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.Tick">
      <summary>
        <para>Tickオブジェクトの設定を表します。</para>
        <para>この型のすべてのメンバの一覧については、Tickメンバを参照してください。</para>
      </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.Title">
      <summary>
        <para>Titleオブジェクトの設定を表します。</para>
        <para>この型のすべてのメンバの一覧については、Titleメンバを参照してください。</para>
      </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.TitlesCollection">
      <summary>
        <para>TitlesCollectionオブジェクトの設定を表します。</para>
        <para>この型のすべてのメンバの一覧については、TitlesCollectionメンバを参照してください。</para>
      </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.WallRange">
      <summary>
        <para>WallRangeオブジェクトの設定を表します。</para>
        <para>この型のすべてのメンバの一覧については、WallRangeメンバを参照してください。</para>
      </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.WallRangesCollection">
      <summary>
        <para>WallRangesCollectionオブジェクトの設定を表します。</para>
        <para>この型のすべてのメンバの一覧については、WallRangesCollectionメンバを参照してください。</para>
      </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.XmlDataProvider">
      <summary>
        <para>XMLデータへのアクセスを提供します。</para>
      </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.AxesCollection.Add(GrapeCity.ActiveReports.Chart.AxisBase)">
      <summary>軸をコレクションに追加します。</summary>
      <param name="value">追加する軸。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.AxesCollection.AddRange(GrapeCity.ActiveReports.Chart.AxisBase[])">
      <summary>軸セットをコレクションに追加します。</summary>
      <param name="value">コレクションに追加する軸。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.AxesCollection.Clone">
      <summary>軸コレクションのクローンを作成します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.AxesCollection.Contains(GrapeCity.ActiveReports.Chart.AxisBase)">
      <summary>コレクションが指定したAxisBaseを含むかどうかを決定します。</summary>
      <returns>
        <para>ブール型。コレクションが指定のパラメータを含む場合はTrueを返します。それ以外の場合はFalse。</para>
      </returns>
      <param name="value">
        <para>コレクション内で検索するAxisBase。</para>
      </param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.AxesCollection.Dispose">
      <summary>このオブジェクトに関連付けられたリソースを解放します。</summary>
      <returns>このオブジェクトに関連付けられたリソースを解放します。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.AxesCollection.IndexOf(GrapeCity.ActiveReports.Chart.AxisBase)">
      <summary>コレクション内で値が最初に見つかった位置のインデックスを返します。</summary>
      <returns>
        <para>コレクション内で値が最初に見つかった位置のインデックスを返します。</para>
      </returns>
      <param name="value">
        <para>コレクション内で検索するオブジェクト。</para>
      </param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.AxesCollection.Insert(System.Int32,GrapeCity.ActiveReports.Chart.AxisBase)">
      <summary>指定した軸をコレクションの指定したインデックス位置に挿入します。</summary>
      <param name="index">軸のインデックス。</param>
      <param name="value">挿入する軸。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.AxesCollection.Remove(GrapeCity.ActiveReports.Chart.AxisBase)">
      <summary>指定した軸をコレクションから削除します。</summary>
      <param name="value">削除する軸。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.AxesCollection.ToArray">
      <summary>軸コレクションの要素を新しい配列にコピーします。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.AxesCollection.Item(System.Int32)">
      <summary>指定したインデックスの軸を取得または設定します。</summary>
      <param name="index">
        <para>軸のインデックス。</para>
      </param>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.AxesCollection.Item(System.String)">
      <summary>コレクション内の指定した名前を持つ軸のインデックスを取得します。</summary>
      <param name="axisName">軸の名前。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Axis.Clone">
      <summary>軸のクローンを作成します。</summary>
      <returns>
        <para>軸のクローン。</para>
      </returns>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Axis.Name">
      <summary>軸の名前を文字列として取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.AxisBase.Arrow">
      <summary>軸上の矢印タイプを取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.AxisBase.AxisType">
      <summary>軸の種類を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.AxisBase.DisplayScale">
      <summary>軸タイトル上のスケール値を表示するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.AxisBase.LabelFont">
      <summary>軸のラベルの描画に使用するフォント情報を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.AxisBase.LabelFormat">
      <summary>ラベルの値の出力形式を取得または設定します。Visual Studio標準の書式設定を使用することが可能です。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.AxisBase.Labels">
      <summary>カテゴリ軸に使用するラベルコレクションの内容を取得します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.AxisBase.LabelsAtBottom">
      <summary>
        <para>
          <strong>Position</strong>プロパティの設定によらず、軸のラベルやメモリをグラフの下側に描画するかどうかを設定または参照します。</para>
      </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.AxisBase.LabelsGap">
      <summary>軸上でスキップするラベル数を示す値を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.AxisBase.LabelsInside">
      <summary>軸ラベルを軸の外側と内側のどちらに表示するかを取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.AxisBase.LabelsVisible">
      <summary>軸上に軸ラベルを描画するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.AxisBase.Line">
      <summary>軸の描画に使用する線を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.AxisBase.MajorTick">
      <summary>軸の主目盛を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.AxisBase.Max">
      <summary>軸の最大値を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.AxisBase.Min">
      <summary>軸の最小値を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.AxisBase.MinorTick">
      <summary>
        <para>軸の副目盛を取得または設定します。</para>
      </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.AxisBase.Position">
      <summary>隣接する軸に沿った位置を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.AxisBase.Scale">
      <summary>ラベルの描画に使用するスケール値を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.AxisBase.SmartLabels">
      <summary>軸上で目盛の自動表示が有効かどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.AxisBase.StaggerLabels">
      <summary>軸上のラベルの交互配置が有効かどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.AxisBase.TickOffset">
      <summary>軸のMin値からの最初の目盛のオフセットを取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.AxisBase.Title">
      <summary>軸のタイトルのテキスト文字列を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.AxisBase.TitleFont">
      <summary>軸のタイトルの描画に使用するフォント情報を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.AxisBase.Visible">
      <summary>軸が表示されているかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.AxisScroll.#ctor">
      <summary>AxisScrollクラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.AxisScroll.Clone">
      <summary>軸のスクロールバーのクローンを作成します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.AxisScroll.BackColor">
      <summary>スクロールバーの背景色を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.AxisScroll.ButtonColor">
      <summary>スクロールバーのボタンの色を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.AxisScroll.Enabled">
      <summary>軸のスクロールバーが有効かどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.AxisScroll.Name">
      <summary>軸のスクロールバーの名前を文字列として取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.AxisScroll.OutlineColor">
      <summary>軸のスクロールバーの輪郭線の色を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.AxisScroll.ScrollLength">
      <summary>軸のスクロールバーのスクロール長を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.AxisScroll.ScrollPosition">
      <summary>軸のスクロールバーのスクロール位置を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.AxisScroll.ScrollStepSize">
      <summary>軸のスクロールバーのスクロールステップサイズを取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.AxisScroll.Visible">
      <summary>
        <para>軸のスクロールバーが表示されているかどうかを示す値を取得または設定します。</para>
      </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.AxisScroll.Width">
      <summary>軸のスクロールバーの幅を取得または設定します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.BackdropItem.#ctor(GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode)">
      <summary>AntiAliasModeを指定して、BackdropItemクラスの新しいインスタンスを初期化します。</summary>
      <param name="antiAliasMode">
        <para>使用するAntiAliasModeを指定します。設定可能な値はAuto、None、Graphics、Text、Bothのいずれかです。</para>
      </param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.BackdropItem.#ctor(System.Drawing.Color)">
      <summary>指定した色を持つBackdropItemクラスの新しいインスタンスを初期化します。</summary>
      <param name="color">色１を指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.BackdropItem.#ctor(System.Drawing.Color,GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode)">
      <summary>パラメータを指定して、BackdropItemクラスの新しいインスタンスを初期化します。</summary>
      <param name="color">色１を指定します。</param>
      <param name="antiAliasMode">
        <para>使用するAntiAliasModeを指定します。設定可能な値はAuto、None、Graphics、Text、Bothのいずれかです。</para>
      </param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.BackdropItem.#ctor(System.Drawing.Color,System.Byte)">
      <summary>パラメータを指定して、BackdropItemクラスの新しいインスタンスを初期化します。</summary>
      <param name="color">色１を指定します。</param>
      <param name="alpha">使用するアルファレベル（透明度）を指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.BackdropItem.#ctor(System.Drawing.Color,System.Byte,GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode)">
      <summary>パラメータを指定して、BackdropItemクラスの新しいインスタンスを初期化します。</summary>
      <param name="color">色１を指定します。</param>
      <param name="alpha">使用するアルファレベル（透明度）を指定します。</param>
      <param name="antiAliasMode">
        <para>使用するAntiAliasModeを指定します。設定可能な値はAuto、None、Graphics、Text、Bothのいずれかです。</para>
      </param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.BackdropItem.#ctor(GrapeCity.ActiveReports.Chart.Graphics.GradientType,System.Drawing.Color,System.Drawing.Color)">
      <summary>パラメータを指定して、BackdropItemクラスの新しいインスタンスを初期化します。</summary>
      <param name="gradient">使用するグラデーションの種類を指定します（GradientTypeに使用）。</param>
      <param name="color">色１を指定します。</param>
      <param name="color2">色２を指定します（ハッチとグラデーションスタイルに使用）。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.BackdropItem.#ctor(GrapeCity.ActiveReports.Chart.Graphics.GradientType,System.Drawing.Color,System.Drawing.Color,GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode)">
      <summary>パラメータを指定して、BackdropItemクラスの新しいインスタンスを初期化します。</summary>
      <param name="gradient">使用するグラデーションの種類を指定します（GradientTypeに使用）。</param>
      <param name="color">色１を指定します。</param>
      <param name="color2">色２を指定します（ハッチとグラデーションスタイルに使用）。</param>
      <param name="antiAliasMode">
        <para>使用するAntiAliasModeを指定します。設定可能な値はAuto、None、Graphics、Text、Bothのいずれかです。</para>
      </param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.BackdropItem.#ctor(System.Drawing.Drawing2D.HatchStyle,System.Drawing.Color,System.Drawing.Color)">
      <summary>パラメータを指定して、BackdropItemクラスの新しいインスタンスを初期化します。</summary>
      <param name="pattern">ハッチパターンを指定します（HatchStyleに使用）。</param>
      <param name="color">色１を指定します。</param>
      <param name="color2">色２を指定します（ハッチとグラデーションスタイルに使用）。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.BackdropItem.#ctor(System.Drawing.Drawing2D.HatchStyle,System.Drawing.Color,System.Drawing.Color,GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode)">
      <summary>パラメータを指定して、BackdropItemクラスの新しいインスタンスを初期化します。</summary>
      <param name="pattern">ハッチパターンを指定します（HatchStyleに使用）。</param>
      <param name="color">色１を指定します。</param>
      <param name="color2">色２を指定します（ハッチとグラデーションスタイルに使用）。</param>
      <param name="antiAliasMode">
        <para>使用するAntiAliasModeを指定します。設定可能な値はAuto、None、Graphics、Text、Bothのいずれかです。</para>
      </param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.BackdropItem.#ctor(System.Drawing.Image,GrapeCity.ActiveReports.Chart.Graphics.PicturePutStyle)">
      <summary>パラメータを指定して、BackdropItemクラスの新しいインスタンスを初期化します。</summary>
      <param name="picture">背景に使用する画像を指定します。</param>
      <param name="pictureAlignment">使用する画像の配置を指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.BackdropItem.#ctor(System.Drawing.Image,GrapeCity.ActiveReports.Chart.Graphics.PicturePutStyle,GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode)">
      <summary>パラメータを指定して、BackdropItemクラスの新しいインスタンスを初期化します。</summary>
      <param name="picture">背景に使用する画像を指定します。</param>
      <param name="pictureAlignment">使用する画像の配置を指定します。</param>
      <param name="antiAliasMode">
        <para>使用するAntiAliasModeを指定します。設定可能な値はAuto、None、Graphics、Text、Bothのいずれかです。</para>
      </param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.BackdropItem.#ctor(GrapeCity.ActiveReports.Chart.Graphics.BackdropStyle,System.Drawing.Color,System.Drawing.Color,GrapeCity.ActiveReports.Chart.Graphics.GradientType,System.Drawing.Drawing2D.HatchStyle,System.Drawing.Image,GrapeCity.ActiveReports.Chart.Graphics.PicturePutStyle)">
      <summary>パラメータを指定して、BackdropItemクラスの新しいインスタンスを初期化します。</summary>
      <param name="style">背景スタイルを指定します。</param>
      <param name="color">色１を指定します。</param>
      <param name="color2">色２を指定します（ハッチとグラデーションスタイルに使用）。</param>
      <param name="gradient">使用するグラデーションの種類を指定します（GradientTypeに使用）。</param>
      <param name="pattern">ハッチパターンを指定します（HatchStyleに使用）。</param>
      <param name="picture">背景に使用する画像を指定します。</param>
      <param name="pictureAlignment">使用する画像の配置を指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.BackdropItem.#ctor(GrapeCity.ActiveReports.Chart.Graphics.BackdropStyle,System.Drawing.Color,System.Drawing.Color,GrapeCity.ActiveReports.Chart.Graphics.GradientType,System.Drawing.Drawing2D.HatchStyle,System.Drawing.Image,GrapeCity.ActiveReports.Chart.Graphics.PicturePutStyle,GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode)">
      <summary>パラメータを指定して、BackdropItemクラスの新しいインスタンスを初期化します。</summary>
      <param name="style">背景スタイルを指定します。</param>
      <param name="color">色１を指定します。</param>
      <param name="color2">色２を指定します（ハッチとグラデーションスタイルに使用）。</param>
      <param name="gradient">使用するグラデーションの種類を指定します（GradientTypeに使用）。</param>
      <param name="pattern">ハッチパターンを指定します（HatchStyleに使用）。</param>
      <param name="picture">背景に使用する画像を指定します。</param>
      <param name="pictureAlignment">使用する画像の配置を指定します。</param>
      <param name="antiAliasMode">
        <para>使用するAntiAliasModeを指定します。設定可能な値はAuto、None、Graphics、Text、Bothのいずれかです。</para>
      </param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.BackdropItem.#ctor(GrapeCity.ActiveReports.Chart.Graphics.BackdropStyle,System.Drawing.Color,System.Drawing.Color,GrapeCity.ActiveReports.Chart.Graphics.GradientType,System.Drawing.Drawing2D.HatchStyle,System.Drawing.Image,GrapeCity.ActiveReports.Chart.Graphics.PicturePutStyle,System.Byte)">
      <summary>パラメータを指定して、BackdropItemクラスの新しいインスタンスを初期化します。</summary>
      <param name="style">背景スタイルを指定します。</param>
      <param name="color">色１を指定します。</param>
      <param name="color2">色２を指定します（ハッチとグラデーションスタイルに使用）。</param>
      <param name="gradient">使用するグラデーションの種類を指定します（GradientTypeに使用）。</param>
      <param name="pattern">ハッチパターンを指定します（HatchStyleに使用）。</param>
      <param name="picture">背景に使用する画像を指定します。</param>
      <param name="pictureAlignment">使用する画像の配置を指定します。</param>
      <param name="alpha">使用するアルファレベル（透明度）を指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.BackdropItem.#ctor(GrapeCity.ActiveReports.Chart.Graphics.BackdropStyle,System.Drawing.Color,System.Drawing.Color,GrapeCity.ActiveReports.Chart.Graphics.GradientType,System.Drawing.Drawing2D.HatchStyle,System.Drawing.Image,GrapeCity.ActiveReports.Chart.Graphics.PicturePutStyle,System.Byte,GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode)">
      <summary>パラメータを指定して、BackdropItemクラスの新しいインスタンスを初期化します。</summary>
      <param name="style">背景スタイルを指定します。</param>
      <param name="color">色１を指定します。</param>
      <param name="color2">色２を指定します（ハッチとグラデーションスタイルに使用）。</param>
      <param name="gradient">使用するグラデーションの種類を指定します（GradientTypeに使用）。</param>
      <param name="pattern">ハッチパターンを指定します（HatchStyleに使用）。</param>
      <param name="picture">背景に使用する画像を指定します。</param>
      <param name="pictureAlignment">使用する画像の配置を指定します。</param>
      <param name="alpha">使用するアルファレベル（透明度）を指定します。</param>
      <param name="antiAliasMode">
        <para>使用するAntiAliasModeを指定します。設定可能な値はAuto、None、Graphics、Text、Bothのいずれかです。</para>
      </param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.BackdropItem.#ctor(GrapeCity.ActiveReports.Chart.Graphics.BackdropStyle,System.Drawing.Color,System.Drawing.Color,GrapeCity.ActiveReports.Chart.Graphics.GradientType,System.Drawing.Drawing2D.HatchStyle,System.Drawing.Image,GrapeCity.ActiveReports.Chart.Graphics.PicturePutStyle,System.Byte,GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode,System.Windows.Forms.ContextMenu)">
      <summary>パラメータを指定して、BackdropItemクラスの新しいインスタンスを初期化します。</summary>
      <param name="style">背景スタイルを指定します。</param>
      <param name="color">色１を指定します。</param>
      <param name="color2">色２を指定します（ハッチとグラデーションスタイルに使用）。</param>
      <param name="gradient">使用するグラデーションの種類を指定します（GradientTypeに使用）。</param>
      <param name="pattern">ハッチパターンを指定します（HatchStyleに使用）。</param>
      <param name="picture">背景に使用する画像を指定します。</param>
      <param name="pictureAlignment">使用する画像の配置を指定します。</param>
      <param name="alpha">使用するアルファレベル（透明度）を指定します。</param>
      <param name="antiAliasMode">
        <para>使用するAntiAliasModeを指定します。設定可能な値はAuto、None、Graphics、Text、Bothのいずれかです。</para>
      </param>
      <param name="contextMenu">コントロールに関連付けられたショートカットメニューを指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.BackdropItem.Equals(System.Object)">
      <summary>BackdropItemオブジェクトを別のSystem.Objectと比較し、２つが等しいかどうか調べます。</summary>
      <returns>
        <para>ブール型。BackdropItemオブジェクトがSystem.Objectに等しい場合はTrueを返します。それ以外の場合はFalse。</para>
      </returns>
      <param name="obj">BackdropItemオブジェクトの比較対象となるSystem.Object。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.BackdropItem.OnMouseDown(GrapeCity.ActiveReports.Chart.GraphMouseEventArgs)">
      <summary>MouseDownイベントを発生させます。</summary>
      <param name="e">イベントデータを含むGraphMouseEventArgs。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.BackdropItem.OnMouseEnter(GrapeCity.ActiveReports.Chart.GraphMouseEventArgs)">
      <summary>MouseEnterイベントを発生させます。</summary>
      <param name="e">イベントデータを含むGraphMouseEventArgs。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.BackdropItem.OnMouseHover(GrapeCity.ActiveReports.Chart.GraphMouseEventArgs)">
      <summary>MouseHoverイベントを発生させます。</summary>
      <param name="e">イベントデータを含むGraphMouseEventArgs。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.BackdropItem.OnMouseLeave(GrapeCity.ActiveReports.Chart.GraphMouseEventArgs)">
      <summary>MouseLeaveイベントを発生させます。</summary>
      <param name="e">イベントデータを含むGraphMouseEventArgs。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.BackdropItem.OnMouseMove(GrapeCity.ActiveReports.Chart.GraphMouseEventArgs)">
      <summary>MouseMoveイベントを発生させます。</summary>
      <param name="e">イベントデータを含むGraphMouseEventArgs。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.BackdropItem.OnMouseUp(GrapeCity.ActiveReports.Chart.GraphMouseEventArgs)">
      <summary>MouseUpイベントを発生させます。</summary>
      <param name="e">イベントデータを含むGraphMouseEventArgs。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.BackdropItem.OnMouseWheel(GrapeCity.ActiveReports.Chart.GraphMouseEventArgs)">
      <summary>MouseWheelイベントを発生させます。</summary>
      <param name="e">イベントデータを含むGraphMouseEventArgs。</param>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.BackdropItem.ContextMenu">
      <summary>
        <para>コントロールに関連付けられたショートカットメニューを取得または設定します。</para>
      </summary>
    </member>
    <member name="E:GrapeCity.ActiveReports.Chart.BackdropItem.MouseDown">
      <summary>マウスポインタがコントロールの上に置かれ、マウスボタンが押されるときに発生します。</summary>
    </member>
    <member name="E:GrapeCity.ActiveReports.Chart.BackdropItem.MouseEnter">
      <summary>マウスポインタがコントロールに入るときに発生します。</summary>
    </member>
    <member name="E:GrapeCity.ActiveReports.Chart.BackdropItem.MouseHover">
      <summary>マウスポインタがコントロールの上をホバリングしているときに発生します。</summary>
    </member>
    <member name="E:GrapeCity.ActiveReports.Chart.BackdropItem.MouseLeave">
      <summary>マウスポインタがコントロールから離れるときに発生します。</summary>
    </member>
    <member name="E:GrapeCity.ActiveReports.Chart.BackdropItem.MouseMove">
      <summary>マウスポインタがコントロールの上を移動するときに発生します。</summary>
    </member>
    <member name="E:GrapeCity.ActiveReports.Chart.BackdropItem.MouseUp">
      <summary>マウスポインタがコントロールの上に置かれ、マウスボタンが解放されるときに発生します。</summary>
    </member>
    <member name="E:GrapeCity.ActiveReports.Chart.BackdropItem.MouseWheel">
      <summary>コントロールがフォーカスを持っているときにマウスホイールが移動すると発生します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Border.#ctor">
      <summary>Borderクラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Border.#ctor(GrapeCity.ActiveReports.Chart.Graphics.Line)">
      <summary>線情報を指定して、Borderクラスの新しいインスタンスを初期化します。</summary>
      <param name="line">境界線の線情報を指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Border.#ctor(GrapeCity.ActiveReports.Chart.Graphics.Line,System.Int32)">
      <summary>パラメータを指定して、Borderクラスの新しいインスタンスを初期化します。</summary>
      <param name="line">境界線の線情報を指定します。</param>
      <param name="shadowWeight">境界線の影の太さを指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Border.#ctor(GrapeCity.ActiveReports.Chart.Graphics.Line,System.Int32,System.Drawing.Color)">
      <summary>パラメータを指定して、Borderクラスの新しいインスタンスを初期化します。</summary>
      <param name="line">境界線の線情報を指定します。</param>
      <param name="shadowWeight">境界線の影の太さを指定します。</param>
      <param name="shadowColor">境界線の影の色を指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Border.Clone">
      <summary>境界線のクローンを作成します。</summary>
      <returns>
        <para>境界線のクローン。</para>
      </returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Border.Equals(System.Object)">
      <summary>Borderオブジェクトを別のSystem.Objectと比較し、２つが等しいかどうか調べます。</summary>
      <returns>
        <para>ブール型。BorderオブジェクトがSystem.Objectに等しい場合はTrueを返します。それ以外の場合はFalse。</para>
      </returns>
      <param name="obj">Borderオブジェクトの比較対象となるSystem.Object。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Border.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。ハッシュアルゴリズムやハッシュテーブルのようなデータ構造での使用に適しています。</summary>
      <returns>このインスタンスのハッシュコードは、ハッシュテーブルのようなハッシュアルゴリズムまたはデータ構造で使用できます。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Border.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>SerializationInfoにターゲットオブジェクトのシリアル化に必要なデータを設定します。</summary>
      <param name="info">
        <para>データを設定するSerializationInfo。</para>
      </param>
      <param name="context">シリアル化のデスティネーション。</param>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Border.Line">
      <summary>グラフの境界線の描画に使用する線スタイルを取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Border.ShadowColor">
      <summary>境界の輪郭線の影の色を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Border.ShadowWeight">
      <summary>
        <para>境界の輪郭線の影の幅を取得または設定します。</para>
      </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.BorderSizes.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>境界線の余白を指定して、BorderSizesクラスの新しいインスタンスを初期化します。</summary>
      <param name="left">左境界線の余白を指定します。</param>
      <param name="right">右境界線の余白を指定します。</param>
      <param name="top">上境界線の余白を指定します。</param>
      <param name="bottom">下境界線の余白を指定します。</param>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.BorderSizes.Bottom">
      <summary>下境界線の内縁と外縁の間の余白を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.BorderSizes.Left">
      <summary>左境界線の内縁と外縁の間の余白を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.BorderSizes.Right">
      <summary>右境界線の内縁と外縁の間の余白を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.BorderSizes.Top">
      <summary>上境界線の内縁と外縁の間の余白を取得または設定します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.ChartArea.#ctor(System.Boolean)">
      <summary>ChartAreaオブジェクトの新しいインスタンスを初期化します。</summary>
      <param name="initializeAxes">軸を初期化するかどうかを指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.ChartArea.Clone">
      <summary>グラフ領域のクローンを作成します。</summary>
      <returns>
        <para>ChartAreaオブジェクトのクローン。</para>
      </returns>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.ChartArea.Axes">
      <summary>ユーザー定義のカスタム軸を取得します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.ChartArea.Backdrop">
      <summary>グラフ領域の描画に使用する背景情報を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.ChartArea.Border">
      <summary>グラフ領域の境界線情報を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.ChartArea.Light">
      <summary>グラフ領域の光源情報を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.ChartArea.Padding">
      <summary>グラフ領域のパディング情報を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.ChartArea.Projection">
      <summary>グラフ領域の幾何学的投影の詳細を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.ChartArea.SwapAxesDirection">
      <summary>X軸とY軸を入れ替えて表示するかどうかを取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.ChartArea.ViewPoint">
      <summary>グラフの視点を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.ChartArea.WallRanges">
      <summary>グラフ領域の壁面範囲（縞線）を取得します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.ChartArea.WallXY">
      <summary>グラフ領域のXY面の設定を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.ChartArea.WallXZ">
      <summary>グラフ領域のXZ面の設定を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.ChartArea.WallYZ">
      <summary>グラフ領域のYZ面の設定を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.ChartArea.ZDepthRatio">
      <summary>グラフのZ軸の奥行きレベルを取得または設定します。Z軸のX軸に対する長さの比率で指定します。値の範囲は0（2Dグラフの場合）～1.0です。このプロパティは、3Dグラフの大きさを調整するのに役立ちます。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.ChartAreasCollection.Add(GrapeCity.ActiveReports.Chart.ChartArea)">
      <summary>グラフ領域をコレクションに追加します。</summary>
      <param name="value">追加するグラフ領域。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.ChartAreasCollection.AddRange(GrapeCity.ActiveReports.Chart.ChartArea[])">
      <summary>グラフ領域セットをコレクションに追加します。</summary>
      <param name="areas">コレクションに追加するグラフ領域。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.ChartAreasCollection.Clear">
      <summary>すべての項目をコレクションからクリアします。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.ChartAreasCollection.Clone">
      <summary>
        <para>グラフ領域コレクションのクローンを作成します。</para>
      </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.ChartAreasCollection.Contains(GrapeCity.ActiveReports.Chart.ChartArea)">
      <summary>コレクションが指定したChartAreaを含むかどうかを決定します。</summary>
      <returns>
        <para>ブール型。コレクションが指定したChartAreaを含む場合はTrue、それ以外の場合はFalse。</para>
      </returns>
      <param name="value">コレクション内で検索するグラフ領域。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.ChartAreasCollection.CopyTo(GrapeCity.ActiveReports.Chart.ChartArea[],System.Int32)">
      <summary>開始インデックスを指定して、コレクションを配列にコピーします。</summary>
      <param name="array">コレクションのコピー先の配列。</param>
      <param name="index">開始インデックス。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.ChartAreasCollection.Dispose">
      <summary>このオブジェクトに関連付けられたリソースを解放します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.ChartAreasCollection.IndexOf(GrapeCity.ActiveReports.Chart.ChartArea)">
      <summary>コレクション内で値が最初に見つかった位置のインデックスを返します。</summary>
      <returns>
        <para>配列全体で値が最初に見つかった位置のインデックス。見つからなかった場合は、配列の下限値 -1。</para>
      </returns>
      <param name="value">コレクション内で検索するオブジェクト。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.ChartAreasCollection.Insert(System.Int32,GrapeCity.ActiveReports.Chart.ChartArea)">
      <summary>指定したグラフ領域をコレクションの指定したインデックスに挿入します。</summary>
      <param name="index">グラフ領域の挿入先のインデックス。</param>
      <param name="value">挿入するChartArea。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.ChartAreasCollection.Remove(GrapeCity.ActiveReports.Chart.ChartArea)">
      <summary>指定したグラフ領域をコレクションから削除します。</summary>
      <param name="value">削除するグラフ領域。</param>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.ChartAreasCollection.Item(System.Int32)">
      <summary>指定したインデックスのグラフ領域を取得または設定します。</summary>
      <param name="index">グラフ領域のインデックス。</param>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.ChartAreasCollection.Item(System.String)">
      <summary>コレクション内の指定した名前のグラフ領域のインデックスを取得します。</summary>
      <param name="chartAreaName">ChartAreaの名前。</param>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.ChartTypeConfig.ApplyColorPaletteOnDataPoint">
      <summary>カラーパレットをデータ点に適用するかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.ChartTypeConfig.CoreRendererType">
      <summary>グラフのコアレンダラの種類を取得します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.ChartTypeConfig.CoreStyleType">
      <summary>グラフのコアスタイルの種類を取得します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.ChartTypeConfig.IsCategorical">
      <summary>グラフをカテゴリ化するかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.ChartTypeConfig.IsXY">
      <summary>グラフがXYプロットグラフかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.ChartTypeConfig.PropertiesTypes">
      <summary>グラフのプロパティの種類を取得します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.ChartTypeConfig.RequiredSeriesCount">
      <summary>グラフに必要なデータセットの数を取得します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.CustomAxis.#ctor">
      <summary>CustomAxisクラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.CustomAxis.Clone">
      <summary>カスタム軸のクローンを作成します。</summary>
      <returns>
        <para>CustomAxisオブジェクトのクローン。</para>
      </returns>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.CustomAxis.MaxDerived">
      <summary>軸がその親軸に対する位置に基づいて最大値を自動的に計算するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.CustomAxis.MinDerived">
      <summary>軸がその親軸に対する位置に基づいて最小値を自動的に計算するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.CustomAxis.Parent">
      <summary>カスタム軸を描画する主軸（X、Y、Zのいずれか）を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.CustomAxis.PlacementLength">
      <summary>親軸を基準にして、カスタム軸の長さを取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.CustomAxis.PlacementLocation">
      <summary>親軸を基準にして、カスタム軸の基点の位置を取得または設定します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.CustomProperties.#ctor">
      <summary>CustomPropertiesクラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.CustomProperties.#ctor(GrapeCity.ActiveReports.Chart.KeyValuePair[])">
      <summary>KeyValuePair配列を指定して、CustomPropertiesクラスの新しいインスタンスを初期化します。</summary>
      <param name="initialValues">文字列属性値の配列。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.CustomProperties.Clone">
      <summary>カスタム属性のクローンを作成します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.CustomProperties.Equals(System.Object)">
      <summary>CustomAttributesオブジェクトを別のSystem.Objectと比較し、２つが等しいかどうか調べます。</summary>
      <returns>指定されたSystem.Objectがこのインスタンスと等しい場合はTrue,そうではない場合はFalseです。</returns>
      <param name="obj">CustomAttributesオブジェクトの比較対象となるSystem.Object。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.CustomProperties.GetAttributes">
      <summary>カスタムプロパティオブジェクトの属性コレクションを取得します。</summary>
      <returns>このオブジェクトの属性を含むSystem.ComponentModel.AttributeCollectionです。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.CustomProperties.GetClassName">
      <summary>クラス名をカスタム属性オブジェクトの文字列として取得します。</summary>
      <returns>オブジェクトのクラス名。クラスの名前がない場合は、Nullです。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.CustomProperties.GetComponentName">
      <summary>コンポーネント名をカスタム属性オブジェクトの文字列として取得します。</summary>
      <returns>オブジェクトの名前。オブジェクトの名前がない場合は、Nullです。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.CustomProperties.GetDefaultEvent">
      <summary>このオブジェクトのデフォルトイベントを返します。</summary>
      <returns>このオブジェクトの既定のイベントを表すSystem.ComponentModel.EventDescriptor。このオブジェクトにイベントがない場合はNullです。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.CustomProperties.GetDefaultProperty">
      <summary>このオブジェクトのデフォルトプロパティを返します。</summary>
      <returns>このオブジェクトの既定のプロパティを表すSystem.ComponentModel.PropertyDescriptor。このオブジェクトにプロパティがない場合はNullです。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.CustomProperties.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>この値がメンバであるオブジェクトを返します。</summary>
      <returns>指定されたプロパティの所有者を表すSystem.Objectです。</returns>
      <param name="pd">
        <para>検索する所有者のプロパティを表すプロパティ記述子。</para>
      </param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.CustomProperties.GetEvents(System.Attribute[])">
      <summary>指定したカスタム属性配列のイベント記述子コレクションを取得します。</summary>
      <returns>このコンポーネントのインスタンスのためにフィルタされたイベントを表すSystem.ComponentModel.EventDescriptorCollectionです。</returns>
      <param name="attributes">属性配列。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.CustomProperties.GetEvents">
      <summary>カスタム属性オブジェクトのイベント記述子コレクションを取得します。</summary>
      <returns>このコンポーネントのインスタンスのためにイベントを表すSystem.ComponentModel.EventDescriptorCollectionです。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.CustomProperties.GetProperties(System.Attribute[])">
      <summary>コンポーネントのこのインスタンスのプロパティを取得します。</summary>
      <returns>このコンポーネントのインスタンスのためにフィルタされたプロパティを表すSystem.ComponentModel.PropertyDescriptorCollectionです。</returns>
      <param name="attributes">属性配列。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.CustomProperties.GetProperties">
      <summary>コンポーネントのこのインスタンスのプロパティを取得します。</summary>
      <returns>このコンポーネントのインスタンスのためにプロパティを表すSystem.ComponentModel.PropertyDescriptorCollectionです。</returns>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.CustomProperties.Item(System.String)">
      <summary>指定した項目をカスタム属性として取得または設定します。</summary>
      <param name="propertyName">プロパティ名（文字列）。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.DataPoint.#ctor">
      <summary>DataPointクラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.DataPoint.#ctor(System.Object,GrapeCity.ActiveReports.Chart.DoubleArray,System.Boolean)">
      <summary>パラメータを指定して、DataPointクラスの新しいインスタンスを初期化します。</summary>
      <param name="xValue">X値を指定します。</param>
      <param name="yValues">DataPointのY値。</param>
      <param name="isEmpty">DataPointが空かどうかを指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.DataPoint.#ctor(System.Object,GrapeCity.ActiveReports.Chart.DoubleArray,System.Boolean,System.Boolean,System.String)">
      <summary>パラメータを指定して、DataPointクラスの新しいインスタンスを初期化します。</summary>
      <param name="xValue">X値を指定します。</param>
      <param name="yValues">DataPointのY値。</param>
      <param name="isEmpty">DataPointが空かどうかを指定します。</param>
      <param name="displayInLegend">凡例にDataPoint情報を表示するかどうかを指定します。</param>
      <param name="legendText">
        <para>凡例に表示するDataPointのテキストを文字列として指定します。</para>
      </param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.DataPoint.#ctor(System.Object,GrapeCity.ActiveReports.Chart.DoubleArray,System.Boolean,GrapeCity.ActiveReports.Chart.CustomProperties)">
      <summary>パラメータを指定して、DataPointクラスの新しいインスタンスを初期化します。</summary>
      <param name="xValue">X値を指定します。</param>
      <param name="yValues">DataPointのY値。</param>
      <param name="isEmpty">DataPointが空かどうかを指定します。</param>
      <param name="properties">DataPointのカスタムプロパティを指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.DataPoint.#ctor(System.Object,GrapeCity.ActiveReports.Chart.DoubleArray,System.Boolean,GrapeCity.ActiveReports.Chart.CustomProperties,System.Boolean,System.String)">
      <summary>パラメータを指定して、DataPointクラスの新しいインスタンスを初期化します。</summary>
      <param name="xValue">X値を指定します。</param>
      <param name="yValues">DataPointのY値。</param>
      <param name="isEmpty">DataPointが空かどうかを指定します。</param>
      <param name="properties">DataPointのカスタムプロパティを指定します。</param>
      <param name="displayInLegend">凡例にDataPoint情報を表示するかどうかを指定します。</param>
      <param name="legendText">
        <para>凡例に表示するDataPointのテキストを文字列として指定します。</para>
      </param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.DataPoint.Clone">
      <summary>DataPointのクローンを作成します。</summary>
      <returns>System.Object.</returns>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.DataPoint.Backdrop">
      <summary>DataPointの背景情報を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.DataPoint.BorderLine">
      <summary>DataPointの境界線の線情報を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.DataPoint.DisplayInLegend">
      <summary>凡例にDataPointを表示するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.DataPoint.IsEmpty">
      <summary>DataPointが空かどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.DataPoint.LegendText">
      <summary>凡例に表示するDataPointのテキストを文字列として取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.DataPoint.Line">
      <summary>DataPointの線の線情報を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.DataPoint.Marker">
      <summary>DataPointのマーカー情報を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.DataPoint.Properties">
      <summary>DataPointのカスタムプロパティを取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.DataPoint.Tooltip">
      <summary>DataPointのツールチップテキストを文字列として取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.DataPoint.XValue">
      <summary>DataPointのX値を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.DataPoint.YValues">
      <summary>DataPointのY値を取得または設定します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.DataPointsCollection.#ctor">
      <summary>DataPointsCollectionクラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.DataPointsCollection.Add(GrapeCity.ActiveReports.Chart.DataPoint)">
      <summary>DataPointをコレクションに追加します。</summary>
      <param name="value">追加するDataPoint。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.DataPointsCollection.AddRange(GrapeCity.ActiveReports.Chart.DataPoint[])">
      <summary>DataPointsセットをコレクションに追加します。</summary>
      <param name="value">コレクションに追加するDataPoints。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.DataPointsCollection.AddXY(System.Object,System.Double[])">
      <summary>
        <para>指定したパラメータを持つDataPointをDataPointsCollectionに追加します。</para>
      </summary>
      <param name="xValue">X値を指定します。</param>
      <param name="yValue">
        <para>Y値を指定します。</para>
      </param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.DataPointsCollection.AddY(System.Double[])">
      <summary>指定したY値を持つDataPointをDataPointsCollectionに追加します。</summary>
      <param name="yValue">Y値を指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.DataPointsCollection.Clone">
      <summary>DataPointsCollectionのクローンを作成します。</summary>
      <returns>
        <para>DataPointsCollectionのクローン。</para>
      </returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.DataPointsCollection.Contains(GrapeCity.ActiveReports.Chart.DataPoint)">
      <summary>コレクションが指定したDataPointを含むかどうかを決定します。</summary>
      <returns>
        <para>コレクションが指定したパラメータを含む場合はTrue、それ以外の場合はFalse。</para>
      </returns>
      <param name="value">コレクション内で検索するDataPoint。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.DataPointsCollection.CopyTo(GrapeCity.ActiveReports.Chart.DataPoint[],System.Int32)">
      <summary>開始インデックスを指定して、コレクションを配列にコピーします。</summary>
      <param name="array">コレクションのコピー先の配列。</param>
      <param name="index">開始インデックス。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.DataPointsCollection.IndexOf(GrapeCity.ActiveReports.Chart.DataPoint)">
      <summary>コレクション内で値が最初に見つかった位置のインデックスを返します。</summary>
      <returns>
        <para>配列全体で値が最初に見つかった位置のインデックス。見つからなかった場合は、配列の下限値 -1。</para>
      </returns>
      <param name="value">
        <para>コレクション内で検索するデータ点。</para>
      </param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.DataPointsCollection.Insert(System.Int32,GrapeCity.ActiveReports.Chart.DataPoint)">
      <summary>指定したDataPointをコレクションの指定したインデックスに挿入します。</summary>
      <param name="index">DataPointの挿入先のインデックス。</param>
      <param name="value">挿入するDataPoint。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.DataPointsCollection.Remove(GrapeCity.ActiveReports.Chart.DataPoint)">
      <summary>指定したDataPointをコレクションから削除します。</summary>
      <param name="value">
        <para>削除するDataPoint。</para>
      </param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.DataPointsCollection.DataBindXY(System.Object,System.String,System.Object,System.String)">
      <summary>コレクションのDataPointsのX値とY値を指定したデータソースの指定した列に連結します。</summary>
      <param name="xDataSource">DataPointsのX値を供給するデータソースを指定します。</param>
      <param name="xField">DataPointsのX値を供給する列の名前を文字列として指定します。</param>
      <param name="yDataSource">コレクションに追加するDataPointオブジェクトのY値（１つまたは複数のカンマ区切りの値）を指定します。</param>
      <param name="yFields">DataPointsのY値を供給するカンマ区切りの列名を指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.DataPointsCollection.DataBindXY(System.Collections.IEnumerable,System.Collections.IEnumerable[])">
      <summary>コレクションのDataPointsのX値とY値を指定したデータソースの最初の列に連結します。</summary>
      <param name="xValueEnumerable">DataPointsのX値を供給するデータソースを指定します。最初に使用可能な列を使用します。</param>
      <param name="yEnumerableValues">コレクションに追加するDataPointオブジェクトのY値（１つまたは複数のカンマ区切りの値）を指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.DataPointsCollection.DataBindXY(System.Object[],System.Double[][])">
      <summary>コレクションのDataPointsのX値とY値を指定したデータソースに連結します。</summary>
      <param name="xValues">コレクションに追加されたDataPointオブジェクトのX値の配列を指定します。</param>
      <param name="yValues">コレクションに追加されたDataPointオブジェクトのY値の配列を指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.DataPointsCollection.DataBindY(System.Object,System.String)">
      <summary>コレクションのDataPointsのY値を指定したデータソースの指定した列に連結します。</summary>
      <param name="yDataSource">Y値を提供するデータソースオブジェクトを指定します。</param>
      <param name="yFields">DataPointsの連結先のデータソースフィールドを指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.DataPointsCollection.DataBindY(System.Collections.IEnumerable[])">
      <summary>コレクションのDataPointsのY値を指定したデータソースの最初の列に連結します。</summary>
      <param name="yEnumerableValues">１つまたは複数のカンマ区切りのIEnumerableデータソースを指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.DataPointsCollection.DataBindY(System.Double[][])">
      <summary>コレクションのDataPointsのY値を指定したデータソースに連結します。</summary>
      <param name="yValues">
        <para>コレクションに追加されたDataPointオブジェクトのY値の配列を指定します。</para>
      </param>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.DataPointsCollection.Item(System.Int32)">
      <summary>指定したインデックスのDataPointを取得または設定します。</summary>
      <param name="index">DataPointのインデックス。</param>
    </member>
    <member name="E:GrapeCity.ActiveReports.Chart.DataPointsCollection.Change">
      <summary>
        <para>DataPointsCollectionの内容が変更されるときに発生します。</para>
      </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.DoubleArray.#ctor(System.Double[])">
      <summary>DoubleArrayクラスの新しいインスタンスを初期化します。</summary>
      <param name="data">配列のデータを指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.DoubleArray.#ctor(System.DateTime[])">
      <summary>DoubleArrayクラスの新しいインスタンスを初期化します。</summary>
      <param name="data">配列の日付時刻型データを指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.DoubleArray.#ctor(System.Double[],System.Boolean[])">
      <summary>DoubleArrayクラスの新しいインスタンスを初期化します。</summary>
      <param name="data">
        <para>配列のデータを指定します。</para>
      </param>
      <param name="isDateTime">配列値がDateTime値かどうかを指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.DoubleArray.#ctor(System.String,System.IFormatProvider)">
      <summary>DoubleArrayクラスの新しいインスタンスを初期化します。</summary>
      <param name="data">データを文字列として指定します。</param>
      <param name="culture">データのカルチャを指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.DoubleArray.#ctor(System.String)">
      <summary>DoubleArrayクラスの新しいインスタンスを初期化します。</summary>
      <param name="data">データを文字列として指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.DoubleArray.Clone">
      <summary>２次元配列のクローンを作成します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.DoubleArray.IsDateTime(System.Int32)">
      <summary>
        <para>２次元配列がDateTime型配列かどうかを示す値を取得します。</para>
      </summary>
      <param name="index">
        <para>２次元配列のインデックスを取得します。</para>
      </param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.DoubleArray.SetIsDateTime(System.Int32,System.Boolean)">
      <summary>指定したインデックスの指定した値をDateTime値として設定します。</summary>
      <param name="index">
        <para>設定する値のインデックスを指定します。</para>
      </param>
      <param name="value">
        <para>値を指定します。</para>
      </param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.DoubleArray.ToString(System.IFormatProvider)">
      <summary>指定した文化に応じて、現在のインスタンスの値を文字列表記に変換します。</summary>
      <param name="culture">使用するカルチャを指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.DoubleArray.ToString">
      <summary>現在のインスタンスの値を文字列表記に変換します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.DoubleArray.Item(System.Int32)">
      <summary>指定したインデックスの値を取得または設定します。</summary>
      <param name="i">
        <para>取得または設定する値のインデックスを指定します。</para>
      </param>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.DoubleArray.Length">
      <summary>２次元配列の長さを取得します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.FontInfo.#ctor">
      <summary>FontInfoクラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.FontInfo.#ctor(System.Drawing.Color,System.Drawing.Font,System.Single)">
      <summary>パラメータを指定して、FontInfoクラスの新しいインスタンスを初期化します。</summary>
      <param name="color">
        <para>使用するテキスト色を指定します。</para>
      </param>
      <param name="font">使用するSystemフォントを指定します。</param>
      <param name="angle">テキストの角度を度単位で指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.FontInfo.#ctor(System.Drawing.Color,System.Drawing.Font)">
      <summary>パラメータを指定して、FontInfoクラスの新しいインスタンスを初期化します。</summary>
      <param name="color">
        <para>使用するテキスト色を指定します。</para>
      </param>
      <param name="font">使用するSystemフォントを指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.FontInfo.Clone">
      <summary>FontInfoオブジェクトのクローンを作成します。</summary>
      <returns>
        <para>FontInfoのクローン。</para>
      </returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.FontInfo.Equals(System.Object)">
      <summary>FontInfoオブジェクトを別のSystem.Objectと比較し、２つが等しいかどうか調べます。</summary>
      <param name="obj">FontInfoオブジェクトの比較対象となるSystem.Object。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.FontInfo.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。ハッシュアルゴリズムやハッシュテーブルのようなデータ構造での使用に適しています。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.FontInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>SerializationInfoにターゲットオブジェクトのシリアル化に必要なデータを設定します。</summary>
      <param name="info">
        <para>データを設定するSerializationInfo。</para>
      </param>
      <param name="context">シリアル化のデスティネーション。</param>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.FontInfo.Angle">
      <summary>テキストの右回りの回転角度を度単位で取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.FontInfo.Color">
      <summary>テキストの色を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.FontInfo.Font">
      <summary>使用するフォントを取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.GraphMouseEventArgs.Control">
      <summary>マウスイベントが発生したコントロールを取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.GraphMouseEventArgs.ItemCount">
      <summary>項目がクリックされた回数を取得します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.GraphMouseEventArgs.PointIndex">
      <summary>項目がクリックされた回数を取得します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.GraphMouseEventArgs.UserX">
      <summary>マウスのX座標を取得します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.GraphMouseEventArgs.UserY">
      <summary>マウスのY座標を取得します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.GridLayout.#ctor(System.Int32,System.Int32)">
      <summary>行数と列数を指定して、GridLayoutクラスの新しいインスタンスを初期化します。</summary>
      <param name="rows">
        <para>行数を指定します。</para>
      </param>
      <param name="columns">列数を指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.GridLayout.DecreaseSize">
      <summary>一度に１列または１行ずつ、グリッドのレイアウトサイズを小さくします。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.GridLayout.Equals(System.Object)">
      <summary>GridLayoutオブジェクトを別のSystem.Objectと比較し、２つが等しいかどうか調べます。</summary>
      <param name="obj">
        <para>GridLayoutオブジェクトの比較対象となるSystem.Object。</para>
      </param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.GridLayout.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。ハッシュアルゴリズムやハッシュテーブルのようなデータ構造での使用に適しています。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.GridLayout.IncreaseSize">
      <summary>一度に１列または１行ずつ、グリッドのレイアウトサイズを大きくします。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.GridLayout.Columns">
      <summary>GridLayoutの列数を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.GridLayout.Rows">
      <summary>GridLayoutの行数を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.GridLayout.Size">
      <summary>GridLayoutのサイズを取得します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.HitTest.Item">
      <summary>指定した座標にあるグラフ項目を取得します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.HitTest.ItemCount">
      <summary>項目の順序数を取得または設定します。データセットビューにのみ適用可能で、列数（セクタ数など）を示します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.KeyValuePair.#ctor(System.String,System.Object)">
      <summary>パラメータを指定して、KeyValuePairクラスの新しいインスタンスを初期化します。</summary>
      <param name="key">カスタムプロパティの名前を文字列として指定します。</param>
      <param name="value">オブジェクトの値を指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.KeyValuePair.#ctor(System.String,System.Object,System.Boolean)">
      <summary>パラメータを指定して、KeyValuePairクラスの新しいインスタンスを初期化します。</summary>
      <param name="key">カスタムプロパティの名前を文字列として指定します。</param>
      <param name="value">オブジェクトの値を指定します。</param>
      <param name="isPointOverridable">ポイントがオーバーライドできるかどうかを指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.KeyValuePair.#ctor(System.String,System.Object,GrapeCity.ActiveReports.Chart.ICustomPropertyValueValidator)">
      <summary>パラメータを指定して、KeyValuePairクラスの新しいインスタンスを初期化します。</summary>
      <param name="key">カスタムプロパティの名前を文字列として指定します。</param>
      <param name="value">オブジェクトの値を指定します。</param>
      <param name="validator">プロパティバリデータを指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.KeyValuePair.#ctor(System.String,System.Object,GrapeCity.ActiveReports.Chart.ICustomPropertyValueValidator,System.Boolean)">
      <summary>パラメータを指定して、KeyValuePairクラスの新しいインスタンスを初期化します。</summary>
      <param name="key">カスタムプロパティの名前を文字列として指定します。</param>
      <param name="value">オブジェクトの値を指定します。</param>
      <param name="validator">プロパティバリデータを指定します。</param>
      <param name="isPointOverridable">ポイントがオーバーライドできるかどうかを指定します。</param>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.KeyValuePair.IsPointOverridable">
      <summary>ポイントがオーバーライドできるかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.KeyValuePair.Key">
      <summary>カスタムプロパティの名前を文字列として取得します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.KeyValuePair.Validator">
      <summary>プロパティバリデータを取得します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.KeyValuePair.Value">
      <summary>オブジェクト値を取得します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.LabelInfo.#ctor">
      <summary>LabelInfoクラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.LabelInfo.#ctor(GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode)">
      <summary>AntiAliasModeを指定して、LabelInfoクラスの新しいインスタンスを初期化します。</summary>
      <param name="antiAliasMode">
        <para>使用するAntiAliasModeを指定します。設定可能な値はAuto、None、Graphics、Text、Bothのいずれかです。</para>
      </param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.LabelInfo.#ctor(GrapeCity.ActiveReports.Chart.Graphics.Line,GrapeCity.ActiveReports.Chart.Graphics.Backdrop,GrapeCity.ActiveReports.Chart.FontInfo,System.String,GrapeCity.ActiveReports.Chart.Alignment)">
      <summary>パラメータを指定して、LabelInfoクラスの新しいインスタンスを初期化します。</summary>
      <param name="border">ラベルの輪郭線の描画に使用する境界線情報を指定します。</param>
      <param name="backdrop">ラベルに使用する背景情報を指定します。</param>
      <param name="font">ラベルのテキストの描画に使用するフォント情報を指定します。</param>
      <param name="format">ラベルの描画に使用する書式文字列を指定します。</param>
      <param name="alignment">アンカー点に対するラベル配置を指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.LabelInfo.#ctor(GrapeCity.ActiveReports.Chart.Graphics.Line,GrapeCity.ActiveReports.Chart.Graphics.Backdrop,GrapeCity.ActiveReports.Chart.FontInfo,System.String,GrapeCity.ActiveReports.Chart.Alignment,GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode)">
      <summary>パラメータを指定して、LabelInfoクラスの新しいインスタンスを初期化します。</summary>
      <param name="border">ラベルの輪郭線の描画に使用する境界線情報を指定します。</param>
      <param name="backdrop">ラベルに使用する背景情報を指定します。</param>
      <param name="font">ラベルのテキストの描画に使用するフォント情報を指定します。</param>
      <param name="format">ラベルの描画に使用する書式文字列を指定します。</param>
      <param name="alignment">アンカー点に対するラベル配置を指定します。</param>
      <param name="antiAliasMode">
        <para>使用するAntiAliasModeを指定します。設定可能な値はAuto、None、Graphics、Text、Bothのいずれかです。</para>
      </param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.LabelInfo.Clone">
      <summary>LabelInfoオブジェクトのクローンを作成します。</summary>
      <returns>
        <para>LabelInfoオブジェクトのクローン。</para>
      </returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.LabelInfo.Equals(System.Object)">
      <summary>LabelInfoオブジェクトを別のSystem.Objectと比較し、２つが等しいかどうか調べます。</summary>
      <param name="obj">TLabelInfoオブジェクトの比較対象となるSystem.Object。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.LabelInfo.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。ハッシュアルゴリズムやハッシュテーブルのようなデータ構造での使用に適しています。</summary>
      <returns>このインスタンスのハッシュコードは、ハッシュテーブルのようなハッシュアルゴリズムまたはデータ構造で使用できます。</returns>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.LabelInfo.Alignment">
      <summary>アンカー点に対するラベル配置を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.LabelInfo.Backdrop">
      <summary>ラベルに使用する背景情報を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.LabelInfo.Border">
      <summary>ラベルの輪郭線の描画に使用する境界線情報を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.LabelInfo.Font">
      <summary>ラベルのテキストの描画に使用するFontInfo情報を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.LabelInfo.Format">
      <summary>ラベルの描画に使用する書式文字列を取得または設定します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.LabelsCollection.Add(System.String)">
      <summary>ラベルをコレクションに追加します。</summary>
      <param name="value">コレクションに追加するラベル。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.LabelsCollection.AddRange(System.String[])">
      <summary>ラベルセットをコレクションに追加します。</summary>
      <param name="value">コレクションに追加するラベル。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.LabelsCollection.Clear">
      <summary>すべてのラベルをコレクションからクリアします。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.LabelsCollection.Clone">
      <summary>
        <para>ラベルコレクションのクローンを作成します。</para>
      </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.LabelsCollection.Contains(System.String)">
      <summary>コレクションが指定したラベルを含むかどうかを決定します。</summary>
      <returns>
        <para>コレクションが指定したパラメータを含む場合はTrue、それ以外の場合はFalse。</para>
      </returns>
      <param name="value">
        <para>チェックするラベル。</para>
      </param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.LabelsCollection.CopyTo(GrapeCity.ActiveReports.Chart.CustomAxis[],System.Int32)">
      <summary>開始インデックスを指定して、コレクションを配列にコピーします。</summary>
      <param name="array">コレクションのコピー先の配列。</param>
      <param name="index">開始インデックス。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.LabelsCollection.GetLabels">
      <summary>コレクション内のラベルの文字列配列を取得します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.LabelsCollection.IndexOf(System.String)">
      <summary>コレクション内でラベルが最初に見つかった位置のインデックスを返します。</summary>
      <returns>
        <para>配列全体で値が最初に見つかった位置のインデックス。見つからなかった場合は、配列の下限値 -1。</para>
      </returns>
      <param name="value">コレクション内で検索するラベル。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.LabelsCollection.Insert(System.Int32,System.String)">
      <summary>指定したラベルをコレクションの指定したインデックスに挿入します。</summary>
      <param name="index">ラベルの挿入先のインデックス。</param>
      <param name="value">挿入するラベル。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.LabelsCollection.Remove(System.String)">
      <summary>指定したラベルをコレクションから削除します。</summary>
      <param name="value">削除するラベル。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.LabelsCollection.RemoveAt(System.Int32)">
      <summary>指定した位置にあるラベルをコレクションから削除します。</summary>
      <param name="index">削除するラベルのインデックス。</param>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.LabelsCollection.Count">
      <summary>コレクション内のラベルの数を取得します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.LabelsCollection.Item(System.Int32)">
      <summary>コレクション内の指定したラベルを取得または設定します。</summary>
      <param name="index">ラベルのインデックスを指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Legend.#ctor">
      <summary>Legendクラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Legend.Clone">
      <summary>Legendオブジェクトのクローンを作成します。</summary>
      <returns>
        <para>Legendオブジェクトのクローン。</para>
      </returns>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Legend.Alignment">
      <summary>グラフ領域内の凡例の配置を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Legend.Backdrop">
      <summary>凡例ボックスの塗りつぶしに使用する背景情報を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Legend.Border">
      <summary>凡例ボックスの輪郭線の描画に使用する境界線情報を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Legend.CustomBorderDrawer">
      <summary>カスタム描画オブジェクトを取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Legend.DockArea">
      <summary>
        <para>凡例をドッキングするグラフエリアを取得または設定します。</para>
      </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Legend.DockInsideArea">
      <summary>グラフエリア内に凡例を配置するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Legend.Footer">
      <summary>凡例のフッタタイトルを取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Legend.GridLayout">
      <summary>凡例のグリッドレイアウトを取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Legend.Header">
      <summary>凡例のヘッダタイトルを取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Legend.LabelsFont">
      <summary>凡例に使用するラベルのフォント情報を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Legend.LegendItems">
      <summary>カスタム凡例項目コレクションを取得します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Legend.MarginX">
      <summary>凡例の水平方向のマージンを取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Legend.MarginY">
      <summary>凡例の垂直方向のマージンを取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Legend.Visible">
      <summary>凡例が表示されているかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.LegendItem.#ctor">
      <summary>LegendItemクラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.LegendItem.Clone">
      <summary>LegendItemのクローンを作成します。</summary>
      <returns>
        <para>LegendItemのクローン。</para>
      </returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.LegendItem.ToString">
      <summary>LegendItemオブジェクトを表す文字列を返します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.LegendItem.Backdrop">
      <summary>凡例のマーカー形状の下に描画する背景情報を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.LegendItem.Border">
      <summary>凡例項目の周りに描画する境界線を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.LegendItem.Line">
      <summary>表示する線情報を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.LegendItem.Marker">
      <summary>凡例内に描画するデータセットのマーカー情報を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.LegendItem.Style">
      <summary>マーカースタイルを取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.LegendItem.Text">
      <summary>凡例に表示するテキストを文字列として取得または設定します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.LegendItemsCollection.#ctor(GrapeCity.ActiveReports.Chart.LegendItem[])">
      <summary>
        <div style="BORDER-BOTTOM: #d0d0d0 1px; PADDING-BOTTOM: 2px; MARGIN-BOTTOM: 5px; COLOR: #000000; PADDING-TOP: 2px">LegendItemsCollectionクラスの新しいインスタンスを初期化します。
</div>
      </summary>
      <param name="itemsArray">新しいコレクションに要素がコピーされている配列。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.LegendItemsCollection.Add(GrapeCity.ActiveReports.Chart.LegendItem)">
      <summary>凡例項目をコレクションに追加します。</summary>
      <param name="item">コレクションに追加する凡例項目。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.LegendItemsCollection.AddRange(GrapeCity.ActiveReports.Chart.LegendItem[])">
      <summary>凡例項目の配列をコレクションに追加します。</summary>
      <param name="items">追加する凡例項目。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.LegendItemsCollection.Clone">
      <summary>
        <para>LegendItemsコレクションのクローンを作成します。</para>
      </summary>
      <returns>このインスタンスのコピーである新しいオブジェクトです。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.LegendItemsCollection.Contains(GrapeCity.ActiveReports.Chart.LegendItem)">
      <summary>コレクションが指定したLegendItemを含むかどうかを決定します。</summary>
      <returns>
        <para>コレクションが指定したパラメータを含む場合はTrue、それ以外の場合はFalse。</para>
      </returns>
      <param name="value">チェックする凡例項目。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.LegendItemsCollection.CopyTo(GrapeCity.ActiveReports.Chart.LegendItem[],System.Int32)">
      <summary>ターゲット配列の開始インデックスを指定して、コレクション全体を互換性のある１次元配列にコピーします。</summary>
      <returns>
        <para>ターゲット配列の開始インデックスを指定して、コレクション全体を互換性のある１次元配列にコピーします。</para>
      </returns>
      <param name="array">コレクションからコピーしたLegendItemsのデスティネーションとなる１次元配列。この配列はゼロベースインデックスである必要があります。</param>
      <param name="index">配列内のコピーの開始インデックス（０～）。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.LegendItemsCollection.Equals(System.Object)">
      <summary>LegendItemsCollectionオブジェクトを別のSystem.Objectと比較し、２つが等しいかどうか調べます。</summary>
      <returns>指定されたSystem.Objectがこのインスタンスと等しい場合はTrue、それ以外の場合はFalse。</returns>
      <param name="obj">LegendItemsCollectionオブジェクトの比較対象となるSystem.Object。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.LegendItemsCollection.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。ハッシュアルゴリズムやハッシュテーブルのようなデータ構造での使用に適しています。</summary>
      <returns>このインスタンスのハッシュコードは、ハッシュテーブルのようなハッシュアルゴリズムまたはデータ構造で使用できます。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.LegendItemsCollection.IndexOf(GrapeCity.ActiveReports.Chart.LegendItem)">
      <summary>コレクション内で値が最初に見つかった位置のインデックスを返します。</summary>
      <returns>
        <para>配列全体で値が最初に見つかった位置のインデックス。見つからなかった場合は、配列の下限値 -1。</para>
      </returns>
      <param name="value">配列内で検索するオブジェクト。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.LegendItemsCollection.Insert(System.Int32,GrapeCity.ActiveReports.Chart.LegendItem)">
      <summary>LegendItemをコレクションの指定したインデックス位置に挿入します。</summary>
      <param name="index">LegendItemを挿入する位置のゼロベースインデックス。</param>
      <param name="item">挿入するLegendItem。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.LegendItemsCollection.Remove(GrapeCity.ActiveReports.Chart.LegendItem)">
      <summary>最初に見つかった指定のオブジェクトをコレクションから削除します。</summary>
      <param name="item">コレクションから削除するLegendItem。</param>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.LegendItemsCollection.Item(System.Int32)">
      <summary>指定したインデックスのカスタムの凡例を取得または設定します。</summary>
      <param name="index">項目のインデックス。</param>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.LegendItemsCollection.Item(System.String)">
      <summary>凡例の名前を指定して、コレクション項目を取得または設定します。</summary>
      <param name="legendItemName">項目の名前。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.LegendsCollection.#ctor">
      <summary>LegendsCollectionクラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.LegendsCollection.Add(GrapeCity.ActiveReports.Chart.Legend)">
      <summary>凡例をコレクションに追加します。</summary>
      <param name="value">コレクションに追加する凡例。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.LegendsCollection.AddRange(GrapeCity.ActiveReports.Chart.Legend[])">
      <summary>凡例の配列をコレクションに追加します。</summary>
      <param name="range">追加する凡例。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.LegendsCollection.Clear">
      <summary>メモリからLegendsCollectionオブジェクトを解放します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.LegendsCollection.Clone">
      <summary>LegendsCollectionのクローンを作成します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.LegendsCollection.Contains(GrapeCity.ActiveReports.Chart.Legend)">
      <summary>コレクションが指定した凡例を含むかどうかを決定します。</summary>
      <returns>
        <para>コレクションが指定したパラメータを含む場合はTrue、それ以外の場合はFalse。</para>
      </returns>
      <param name="value">チェックする凡例。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.LegendsCollection.CopyTo(GrapeCity.ActiveReports.Chart.Legend[],System.Int32)">
      <summary>ターゲット配列の開始インデックスを指定して、コレクション全体を配列にコピーします。</summary>
      <param name="array">コレクションのコピー先の配列。</param>
      <param name="index">コピーの開始インデックス。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.LegendsCollection.Equals(System.Object)">
      <summary>LegendsCollectionオブジェクトを別のSystem.Objectと比較し、２つが等しいかどうか調べます。</summary>
      <param name="obj">LegendsCollectionオブジェクトの比較対象となるSystem.Object。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.LegendsCollection.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。ハッシュアルゴリズムやハッシュテーブルのようなデータ構造での使用に適しています。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.LegendsCollection.IndexOf(GrapeCity.ActiveReports.Chart.Legend)">
      <summary>コレクション内で値が最初に見つかった位置のインデックスを返します。</summary>
      <returns>
        <para>配列全体で値が最初に見つかった位置のインデックス。見つからなかった場合は、配列の下限値 -1。</para>
      </returns>
      <param name="value">コレクション内で検索するオブジェクト。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.LegendsCollection.Insert(System.Int32,GrapeCity.ActiveReports.Chart.Legend)">
      <summary>凡例をコレクションの指定したインデックス位置に挿入します。</summary>
      <param name="index">凡例の挿入位置のインデックス。</param>
      <param name="value">挿入する凡例。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.LegendsCollection.Remove(GrapeCity.ActiveReports.Chart.Legend)">
      <summary>最初に見つかった指定の凡例をコレクションから削除します。</summary>
      <param name="value">削除する凡例。</param>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.LegendsCollection.Item(System.Int32)">
      <summary>インデックスを指定して、コレクション項目を取得または設定します。</summary>
      <param name="index">項目のインデックス。</param>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.LegendsCollection.Item(System.String)">
      <summary>凡例の名前を指定して、コレクション項目を取得または設定します。</summary>
      <param name="legendName">凡例の名前。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Light.#ctor">
      <summary>Lightクラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Light.#ctor(GrapeCity.ActiveReports.Chart.Graphics.Point3d,GrapeCity.ActiveReports.Chart.LightType,System.Single)">
      <summary>パラメータを指定して、Lightクラスの新しいインスタンスを初期化します。</summary>
      <param name="source">光源の位置を指定します。</param>
      <param name="type">光源の種類を指定します。</param>
      <param name="directionalRatio">点光源または平行光源の強度を指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Light.Clone">
      <summary>Lightオブジェクトのクローンを作成します。</summary>
      <returns>
        <para>Lightオブジェクトのクローン。</para>
      </returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Light.Equals(System.Object)">
      <summary>Lightオブジェクトを別のSystem.Objectと比較し、２つが等しいかどうか調べます。</summary>
      <param name="obj">Lightオブジェクトの比較対象となるSystem.Object。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Light.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。ハッシュアルゴリズムやハッシュテーブルのようなデータ構造での使用に適しています。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Light.DirectionalRatio">
      <summary>点光源または平行光源の強度を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Light.Source">
      <summary>光源の位置を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Light.Type">
      <summary>光源の種類を取得または設定します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Marker.#ctor">
      <summary>Markerクラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Marker.#ctor(GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode)">
      <summary>AntiAliasModeを指定して、Markerクラスの新しいインスタンスを初期化します。</summary>
      <param name="antiAliasMode">使用するアンチエイリアスモードを指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Marker.#ctor(System.Int32,GrapeCity.ActiveReports.Chart.MarkerStyle,GrapeCity.ActiveReports.Chart.Graphics.Backdrop,GrapeCity.ActiveReports.Chart.Graphics.Line,GrapeCity.ActiveReports.Chart.LabelInfo)">
      <summary>パラメータを指定して、Markerクラスの新しいインスタンスを初期化します。</summary>
      <param name="size">マーカーのサイズを指定します。</param>
      <param name="style">マーカーのスタイルを指定します。</param>
      <param name="backdrop">マーカーの塗りつぶしに使用する背景情報を指定します。</param>
      <param name="line">マーカーの輪郭線の描画に使用する線情報を指定します。</param>
      <param name="label">マーカーに使用するラベル情報を指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Marker.#ctor(System.Int32,GrapeCity.ActiveReports.Chart.MarkerStyle,GrapeCity.ActiveReports.Chart.Graphics.Backdrop,GrapeCity.ActiveReports.Chart.Graphics.Line,GrapeCity.ActiveReports.Chart.LabelInfo,System.Single)">
      <summary>Markerクラスの新しいインスタンスを初期化します。</summary>
      <param name="size">マーカーのサイズを指定します。</param>
      <param name="style">マーカーのスタイルを指定します。</param>
      <param name="backdrop">マーカーの塗りつぶしに使用する背景情報を指定します。</param>
      <param name="line">マーカーの輪郭線の描画に使用する線情報を指定します。</param>
      <param name="label">マーカーに使用するラベル情報を指定します。</param>
      <param name="labelDistanceFactor">
        <span style="TEXT-ALIGN: left; TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; LETTER-SPACING: normal; DISPLAY: inline !important; FONT: 13px arial, sans, sans-serif; WHITE-SPACE: pre-wrap; FLOAT: none; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px">
ラベルの距離係数を表します。</span>
      </param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Marker.#ctor(System.Int32,GrapeCity.ActiveReports.Chart.MarkerStyle,GrapeCity.ActiveReports.Chart.Graphics.Backdrop,GrapeCity.ActiveReports.Chart.Graphics.Line,GrapeCity.ActiveReports.Chart.LabelInfo,GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode)">
      <summary>パラメータを指定して、Markerクラスの新しいインスタンスを初期化します。</summary>
      <param name="size">マーカーのサイズを指定します。</param>
      <param name="style">マーカーのスタイルを指定します。</param>
      <param name="backdrop">マーカーの塗りつぶしに使用する背景情報を指定します。</param>
      <param name="line">マーカーの輪郭線の描画に使用する線情報を指定します。</param>
      <param name="label">マーカーに使用するラベル情報を指定します。</param>
      <param name="antiAliasMode">使用するアンチエイリアスモードを指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Marker.Clone">
      <summary>Markerオブジェクトのクローンを作成します。</summary>
      <returns>
        <para>Markerオブジェクトのクローン。</para>
      </returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Marker.Equals(System.Object)">
      <summary>Markerオブジェクトを別のSystem.Objectと比較し、２つが等しいかどうか調べます。</summary>
      <param name="obj">Markerオブジェクトの比較対象となるSystem.Object。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Marker.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。ハッシュアルゴリズムやハッシュテーブルのようなデータ構造での使用に適しています。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Marker.Backdrop">
      <summary>マーカーの塗りつぶしに使用する背景情報を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Marker.Label">
      <summary>マーカーのラベル情報を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Marker.LabelDistanceFactor">
      <summary>グラフからマーカーのラベルの距離を設定する値を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Marker.Line">
      <summary>マーカーの輪郭線の描画に使用する線情報を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Marker.Size">
      <summary>マーカーのサイズを取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Marker.Style">
      <summary>マーカーの形状を取得または設定します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.PlaneItem.#ctor">
      <summary>
        <para>PlaneItemクラスの新しいインスタンスを初期化します。</para>
      </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.PlaneItem.#ctor(GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode)">
      <summary>AntiAliasModeを指定して、PlaneItemクラスの新しいインスタンスを初期化します。</summary>
      <param name="antiAliasMode">使用するアンチエイリアスモードを指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.PlaneItem.#ctor(GrapeCity.ActiveReports.Chart.Graphics.Backdrop)">
      <summary>背景情報を指定して、PlaneItemクラスの新しいインスタンスを初期化します。</summary>
      <param name="backdrop">壁面の塗りつぶしに使用する背景情報を指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.PlaneItem.#ctor(GrapeCity.ActiveReports.Chart.Graphics.Backdrop,GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode)">
      <summary>パラメータを指定して、PlaneItemクラスの新しいインスタンスを初期化します。</summary>
      <param name="backdrop">壁面の塗りつぶしに使用する背景情報を指定します。</param>
      <param name="antiAliasMode">使用するアンチエイリアスモードを指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.PlaneItem.#ctor(GrapeCity.ActiveReports.Chart.Graphics.Backdrop,System.Single)">
      <summary>パラメータを指定して、PlaneItemクラスの新しいインスタンスを初期化します。</summary>
      <param name="backdrop">壁面の塗りつぶしに使用する背景情報を指定します。</param>
      <param name="width">グラフ壁面の幅を指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.PlaneItem.#ctor(GrapeCity.ActiveReports.Chart.Graphics.Backdrop,System.Single,GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode)">
      <summary>パラメータを指定して、PlaneItemクラスの新しいインスタンスを初期化します。</summary>
      <param name="backdrop">壁面の塗りつぶしに使用する背景情報を指定します。</param>
      <param name="width">グラフ壁面の幅を指定します。</param>
      <param name="antiAliasMode">使用するアンチエイリアスモードを指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.PlaneItem.#ctor(GrapeCity.ActiveReports.Chart.Graphics.Backdrop,System.Boolean,System.Single)">
      <summary>パラメータを指定して、PlaneItemクラスの新しいインスタンスを初期化します。</summary>
      <param name="backdrop">壁面の塗りつぶしに使用する背景情報を指定します。</param>
      <param name="visible">グラフの壁面が表示されているかどうかを指定します。</param>
      <param name="width">グラフ壁面の幅を指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.PlaneItem.#ctor(GrapeCity.ActiveReports.Chart.Graphics.Backdrop,System.Boolean,System.Single,GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode)">
      <summary>パラメータを指定して、PlaneItemクラスの新しいインスタンスを初期化します。</summary>
      <param name="backdrop">壁面の塗りつぶしに使用する背景情報を指定します。</param>
      <param name="visible">グラフの壁面が表示されているかどうかを指定します。</param>
      <param name="width">グラフ壁面の幅を指定します。</param>
      <param name="antiAliasMode">使用するアンチエイリアスモードを指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.PlaneItem.#ctor(GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode,GrapeCity.ActiveReports.Chart.Graphics.Backdrop,System.Boolean,System.Single,System.Windows.Forms.ContextMenu)">
      <summary>パラメータを指定して、PlaneItemクラスの新しいインスタンスを初期化します。</summary>
      <param name="antiAliasMode">使用するアンチエイリアスモードを指定します。</param>
      <param name="backdrop">壁面の塗りつぶしに使用する背景情報を指定します。</param>
      <param name="visible">グラフの壁面が表示されているかどうかを指定します。</param>
      <param name="width">グラフ壁面の幅を指定します。</param>
      <param name="contextMenu">グラフ壁面のコンテキストメニューとして使用するメニューを指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.PlaneItem.Clone">
      <summary>PlaneItemオブジェクトのクローンを作成します。</summary>
      <returns>
        <para>PlaneItemオブジェクトのクローン。</para>
      </returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.PlaneItem.Equals(System.Object)">
      <summary>オーバーライドされます。</summary>
      <returns>
        <para>PlaneItemオブジェクトを別のSystem.Objectと比較し、２つが等しいかどうか調べます。</para>
      </returns>
      <param name="obj">
        <para>PlaneItemオブジェクトの比較対象となるSystem.Object。</para>
      </param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.PlaneItem.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。ハッシュアルゴリズムやハッシュテーブルのようなデータ構造での使用に適しています。</summary>
      <returns>このインスタンスのハッシュコードは、ハッシュテーブルのようなハッシュアルゴリズムまたはデータ構造で使用できます。</returns>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.PlaneItem.Backdrop">
      <summary>グラフ壁面の背景情報を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.PlaneItem.Visible">
      <summary>グラフ壁面が表示されているかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.PlaneItem.Width">
      <summary>グラフ壁面の幅（太さ）を取得または設定します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Projection.#ctor">
      <summary>Projectionクラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Projection.#ctor(GrapeCity.ActiveReports.Chart.Graphics.ProjectionType,System.Single,System.Single)">
      <summary>パラメータを指定して、Projectionクラスの新しいインスタンスを初期化します。</summary>
      <param name="projectionType">投影の種類を指定します。</param>
      <param name="projectionDX">X軸の世界基点オフセットを指定します。直交投影でのみ使用。</param>
      <param name="projectionDY">Y軸の世界基点オフセットを指定します。直交投影でのみ使用。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Projection.#ctor(GrapeCity.ActiveReports.Chart.Graphics.ProjectionType,System.Single,System.Single,System.Single,System.Single)">
      <summary>パラメータを指定して、Projectionクラスの新しいインスタンスを初期化します。</summary>
      <param name="projectionType">投影の種類を指定します。</param>
      <param name="projectionDX">X軸の世界基点オフセットを指定します。直交投影でのみ使用。</param>
      <param name="projectionDY">Y軸の世界基点オフセットを指定します。直交投影でのみ使用。</param>
      <param name="horizontalRotation">左右反転のグラフ表示を指定します。</param>
      <param name="verticalRotation">上下反転のグラフ表示を指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Projection.#ctor(GrapeCity.ActiveReports.Chart.Graphics.ProjectionType,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Projectionクラスの新しいインスタンスを初期化します。</summary>
      <param name="projectionType">投影の種類を指定します。</param>
      <param name="projectionDX">X軸の世界基点オフセットを指定します。直交投影でのみ使用。</param>
      <param name="projectionDY">Y軸の世界基点オフセットを指定します。直交投影でのみ使用。</param>
      <param name="horizontalRotation">左右反転のグラフ表示を指定します。</param>
      <param name="verticalRotation">上下反転のグラフ表示を指定します。</param>
      <param name="perspectiveRatio">
        <span style="WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: 14px/20px Meiryo, 'Segoe UI', 'Lucida Grande', Verdana, Arial, Helvetica, sans-serif; WHITE-SPACE: normal; ORPHANS: 2; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(69,69,69); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px">
パースペクティブ射影タイプのパースペクティブ比率。</span>
      </param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Projection.Clone">
      <summary>Projectionオブジェクトのクローンを作成します。</summary>
      <returns>
        <para>Projectionオブジェクトのクローン。</para>
      </returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Projection.Equals(System.Object)">
      <summary>
        <para>Projectionオブジェクトを別のSystem.Objectと比較し、２つが等しいかどうか調べます。</para>
      </summary>
      <returns>Projectionオブジェクトを別のSystem.Objectと比較し、等しいかどうかを調べます。</returns>
      <param name="obj">Projectionオブジェクトの比較対象となるSystem.Object。</param>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Projection.HorizontalRotation">
      <summary>X軸における回転角度（-90度から90度まで）を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Projection.PerspectiveRatioPct">
      <summary>ProjectionTypeプロパティがPerspectiveに設定されている場合、奥行き比（0～100%）を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Projection.ProjectionDX">
      <summary>X軸を基準点としたZ軸のオフセットを取得または設定します。直交投影でのみ使用。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Projection.ProjectionDY">
      <summary>Y軸を基準点としたZ軸のオフセットを取得または設定します。直交投影でのみ使用。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Projection.ProjectionType">
      <summary>投影の種類を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Projection.VerticalRotation">
      <summary>Y軸における回転角度（-90度から90度まで）を取得または設定します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Series.#ctor">
      <summary>Seriesクラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Series.Clone">
      <summary>Seriesオブジェクトのクローンを作成します。</summary>
      <returns>
        <para>Seriesオブジェクトのクローン。</para>
      </returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Series.OnMouseHover(GrapeCity.ActiveReports.Chart.GraphMouseEventArgs)">
      <summary>MouseHoverイベントを発生させます。</summary>
      <returns>
        <para>MouseHoverイベントを発生させます。</para>
      </returns>
      <param name="e">イベントデータを含むGraphMouseEventArgs。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Series.OnMouseLeave(GrapeCity.ActiveReports.Chart.GraphMouseEventArgs)">
      <summary>MouseLeaveイベントを発生させます。</summary>
      <param name="e">イベントデータを含むGraphMouseEventArgs。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Series.OnMouseMove(GrapeCity.ActiveReports.Chart.GraphMouseEventArgs)">
      <summary>MouseMoveイベントを発生させます。</summary>
      <param name="e">イベントデータを含むGraphMouseEventArgs。</param>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Series.Annotations">
      <summary>系列と共に使用する注釈コレクションを返します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Series.AxisX">
      <summary>レイヤの水平方向の基準軸を設定するか返します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Series.AxisY">
      <summary>レイヤの垂直方向の基準軸を設定するか返します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Series.Backdrop">
      <summary>系列の背景情報を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Series.BorderLine">
      <summary>系列の境界線の描画に使用する情報を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Series.ChartArea">
      <summary>系列のChartAreaを設定するか返します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Series.ChartConfig">
      <summary>系列のChartTypeConfigを返します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Series.ColorPalette">
      <summary>系列に使用するカラーパレット列挙体を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Series.DisplayInLegend">
      <summary>グラフの凡例に系列を表示するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Series.Legend">
      <summary>系列のLegendオブジェクトを取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Series.LegendItemsMode">
      <summary>凡例を表示するために使用するモードを、取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Series.LegendText">
      <summary>凡例に表示する系列のテキストを取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Series.Line">
      <summary>系列の線情報を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Series.Marker">
      <summary>系列に使用するマーカー情報を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Series.Name">
      <summary>系列の名前を文字列として取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Series.Points">
      <summary>DataPointsCollectionオブジェクトを取得します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Series.Properties">
      <summary>系列のカスタムプロパティを取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Series.Tooltip">
      <summary>系列のツールチップテキストを取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Series.Type">
      <summary>系列のグラフの種類を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Series.ValueMembersY">
      <summary>系列のY値の結合数式を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Series.ValueMemberX">
      <summary>系列のX値の結合数式を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Series.Visible">
      <summary>系列が表示されているかどうかを示す値を設定するか返します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Series.ZOrder">
      <summary>グラフ上の系列のZ位置を取得または設定します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.SeriesCollection.#ctor">
      <summary>SeriesCollectionクラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.SeriesCollection.Add(GrapeCity.ActiveReports.Chart.Series)">
      <summary>系列をコレクションに追加します。</summary>
      <param name="value">コレクションに追加する系列。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.SeriesCollection.AddRange(GrapeCity.ActiveReports.Chart.Series[])">
      <summary>Seriesオブジェクトの配列をコレクションに追加します。</summary>
      <param name="value">コレクションに追加するSeriesオブジェクトセット。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.SeriesCollection.Clone">
      <summary>SeriesCollectionのクローンを作成します。</summary>
      <returns>
        <para>SeriesCollectionのクローン。</para>
      </returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.SeriesCollection.Contains(GrapeCity.ActiveReports.Chart.Series)">
      <summary>コレクションが指定した系列を含むかどうかを決定します。</summary>
      <returns>
        <para>コレクションが指定したパラメータを含む場合はTrue、それ以外の場合はFalse。</para>
      </returns>
      <param name="value">
        <para>チェックする系列。</para>
      </param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.SeriesCollection.CopyTo(GrapeCity.ActiveReports.Chart.Series[],System.Int32)">
      <summary>ターゲット配列の開始インデックスを指定して、コレクション全体を配列にコピーします。</summary>
      <returns>
        <para>ターゲット配列の開始インデックスを指定して、コレクション全体を配列にコピーします。</para>
      </returns>
      <param name="array">コレクションのコピー先の配列。</param>
      <param name="index">開始インデックス。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.SeriesCollection.Dispose">
      <summary>このオブジェクトに関連付けられたリソースを解放します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.SeriesCollection.Equals(System.Object)">
      <summary>SeriesCollectionオブジェクトを別のSystem.Objectと比較し、２つが等しいかどうか調べます。</summary>
      <param name="obj">SeriesCollectionオブジェクトの比較対象となるSystem.Object。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.SeriesCollection.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。ハッシュアルゴリズムやハッシュテーブルのようなデータ構造での使用に適しています。</summary>
      <returns>このインスタンスのハッシュコードは、ハッシュテーブルのようなハッシュアルゴリズムまたはデータ構造で使用できます。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.SeriesCollection.IndexOf(GrapeCity.ActiveReports.Chart.Series)">
      <summary>コレクション内で値が最初に見つかった位置のインデックスを返します。</summary>
      <returns>
        <para>配列全体で値が最初に見つかった位置のインデックス。見つからなかった場合は、配列の下限値 -1。</para>
      </returns>
      <param name="value">コレクション内で検索するオブジェクト。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.SeriesCollection.Insert(System.Int32,GrapeCity.ActiveReports.Chart.Series)">
      <summary>系列をコレクションの指定したインデックス位置に挿入します。</summary>
      <param name="index">系列の挿入位置のインデックス。</param>
      <param name="value">挿入する系列。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.SeriesCollection.Remove(GrapeCity.ActiveReports.Chart.Series)">
      <summary>最初に見つかった指定の系列をコレクションから削除します。</summary>
      <param name="value">削除する系列。</param>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.SeriesCollection.Item(System.Int32)">
      <summary>インデックスを指定して、コレクション項目を取得または設定します。</summary>
      <param name="index">項目のインデックス。</param>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.SeriesCollection.Item(System.String)">
      <summary>系列名を指定して、コレクション項目を取得または設定します。</summary>
      <param name="seriesName">系列の名前。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.SharpGraph.#ctor">
      <summary>SharpGraphオブジェクトの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.SharpGraph.DoCommand(GrapeCity.ActiveReports.Chart.UICommand,System.Object[])">
      <summary>SharpGraphオブジェクトのコマンドを実行します。</summary>
      <param name="command">実行する列挙型のコマンドを指定します。</param>
      <param name="parameters">コマンドのオプションのパラメータを指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.SharpGraph.DrawContent(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>提供されたグラフィックスオブジェクト上にグラフを描画します。</summary>
      <param name="graphics">指定したグラフィックスオブジェクト。</param>
      <param name="rectangle">描画する矩形。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.SharpGraph.HitTest(System.Int32,System.Int32)">
      <summary>指定した座標にあるグラフ項目に関する情報を返します。</summary>
      <returns>
        <para>HitTestInfoへの参照。項目が見つからなかった場合はnull。</para>
      </returns>
      <param name="x">指定したX軸座標。</param>
      <param name="y">指定したY軸座標。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.SharpGraph.QuickLoad(System.IO.BinaryReader)">
      <summary>
        <para>プリミティブデータ型からバイナリ値としてグラフをロードします。</para>
      </summary>
      <param name="binReader">グラフのロード元のSystem.IO.BinaryReader。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.SharpGraph.QuickSave(System.IO.BinaryWriter)">
      <summary>
        <para>グラフをバイナリのプリミティブ型としてストリームに保存します。</para>
      </summary>
      <param name="binWriter">グラフの保存先のSystem.IO.BinaryWriter。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.SharpGraph.ReadXml(System.Xml.XmlElement)">
      <summary>グラフをXmlElementから読み込みます。</summary>
      <param name="controlNode">グラフの読み込み元のSystem.Xml.XmlElement。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.SharpGraph.WriteXml(System.Xml.XmlElement)">
      <summary>グラフをXmlElementから書き込みます。</summary>
      <param name="controlNode">グラフの書き込み先のSystem.Xml.XmlElement。</param>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.SharpGraph.AreaCustomBorderDrawer">
      <summary>ChartAreasのカスタム境界線ドロワオブジェクトを取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.SharpGraph.AutoRefresh">
      <summary>プロパティの変更ごとにグラフを自動的に更新（再描画）するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.SharpGraph.Backdrop">
      <summary>グラフの背景情報を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.SharpGraph.Border">
      <summary>グラフの境界線情報を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.SharpGraph.ChartAreas">
      <summary>チャートコントロールのChartAreasCollectionを取得します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.SharpGraph.ChartCustomBorderDrawer">
      <summary>コントロール全体のカスタム境界線ドロワオブジェクトを取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.SharpGraph.ColorPalette">
      <summary>グラフのColorPalette列挙体を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.SharpGraph.Cursor">
      <summary>グラフに使用するカーソルを取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.SharpGraph.DataSource">
      <summary>グラフのグローバルデータソースを取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.SharpGraph.DeviceMode">
      <summary>グラフィックスデバイスのオプションを指定する列挙値を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.SharpGraph.GridLayout">
      <summary>
        <para>グラフ領域のGridLayoutオブジェクトを取得または設定します。</para>
      </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.SharpGraph.IsDesignMode">
      <summary>
        <para>グラフが現在デザインモードかどうかを示す値を取得します。</para>
      </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.SharpGraph.Legends">
      <summary>チャートコントロールのLegendオブジェクトを取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.SharpGraph.Series">
      <summary>Chartオブジェクトのデータセットコレクションを取得します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.SharpGraph.Titles">
      <summary>Chartオブジェクトのタイトルコレクションを取得します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.SharpGraph.UIOptions">
      <summary>グラフの列挙型のユーザーインタフェース機能を取得または設定します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Tick.#ctor">
      <summary>Tickクラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Tick.#ctor(System.Double)">
      <summary>stepパラメータを指定して、Tickクラスの新しいインスタンスを初期化します。</summary>
      <param name="step">目盛のステップを指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Tick.#ctor(GrapeCity.ActiveReports.Chart.Graphics.Line,System.Double,System.Single)">
      <summary>パラメータを指定して、Tickクラスの新しいインスタンスを初期化します。</summary>
      <param name="line">目盛線の描画に使用する線情報を指定します。</param>
      <param name="step">目盛のステップを指定します。</param>
      <param name="length">目盛の長さを指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Tick.#ctor(GrapeCity.ActiveReports.Chart.Graphics.Line,GrapeCity.ActiveReports.Chart.Graphics.Line,System.Double,System.Single,System.Boolean)">
      <summary>パラメータを指定して、Tickクラスの新しいインスタンスを初期化します。</summary>
      <param name="line">目盛線の描画に使用する線情報を指定します。</param>
      <param name="gridLine">グリッド線の描画に使用する線情報を指定します。</param>
      <param name="step">目盛のステップを指定します。</param>
      <param name="length">目盛の長さを指定します。</param>
      <param name="visible">目盛線とグリッド線が表示されているかどうかを指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Tick.Clone">
      <summary>Tickオブジェクトのクローンを作成します。</summary>
      <returns>
        <para>Tickオブジェクトのクローン。</para>
      </returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Tick.Equals(System.Object)">
      <summary>Tickオブジェクトを別のSystem.Objectと比較し、２つが等しいかどうか調べます。</summary>
      <returns>指定されたSystem.Objectがこのインスタンスと等しい場合はTrue、それ以外の場合はFalse。</returns>
      <param name="obj">Tickオブジェクトの比較対象となるSystem.Object。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Tick.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。ハッシュアルゴリズムやハッシュテーブルのようなデータ構造での使用に適しています。</summary>
      <returns>このインスタンスのハッシュコードは、ハッシュテーブルのようなハッシュアルゴリズムまたはデータ構造で使用できます。</returns>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Tick.GridLine">
      <summary>グラフ壁面上のグリッドの描画に使用する線を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Tick.Length">
      <summary>目盛の描画に使用する線の長さを取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Tick.Line">
      <summary>目盛の描画に使用する線を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Tick.Step">
      <summary>軸の計測単位の２つの連続する目盛の間のステップを取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Tick.Visible">
      <summary>目盛が表示されているかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Title.#ctor">
      <summary>Titleクラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Title.Clone">
      <summary>Titleオブジェクトのクローンを作成します。</summary>
      <returns>
        <para>Titleオブジェクトのクローン。</para>
      </returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Title.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>このオブジェクトの再インスタンス化に必要なすべてのデータを含むシリアル化情報を取得します。</summary>
      <param name="info">シリアル化情報を格納するオブジェクト。</param>
      <param name="context">シリアル化のデスティネーションコンテキスト。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Title.ToString">
      <summary>現在のTitleオブジェクトを表す文字列を返します。</summary>
      <returns>このインスタンスを表すSystem.Stringです。</returns>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Title.Alignment">
      <summary>Titleオブジェクトのテキスト配置を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Title.Backdrop">
      <summary>タイトルのBackdropオブジェクトを取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Title.Border">
      <summary>Titleオブジェクトの周りに描画する境界線を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Title.CustomBorderDrawer">
      <summary>カスタム境界線描画の実装クラスを取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Title.DockArea">
      <summary>タイトルをドッキングするグラフ領域を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Title.Docking">
      <summary>タイトルのドックタイプ値を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Title.Font">
      <summary>タイトルテキストの描画に使用するフォント情報を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Title.Name">
      <summary>Titleオブジェクトの名前を文字列として取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Title.Text">
      <summary>表示するTitleオブジェクトのテキストを取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Title.Visible">
      <summary>Titleオブジェクトが表示されているかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.TitlesCollection.#ctor">
      <summary>TitlesCollectionクラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.TitlesCollection.Add(GrapeCity.ActiveReports.Chart.Title)">
      <summary>タイトルをコレクションに追加します。</summary>
      <param name="value">コレクションに追加するタイトルを指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.TitlesCollection.AddRange(GrapeCity.ActiveReports.Chart.Title[])">
      <summary>タイトルの配列をコレクションに追加します。</summary>
      <param name="value">コレクションに追加するタイトルセット。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.TitlesCollection.Clone">
      <summary>TitlesCollectionのクローンを作成します。</summary>
      <returns>
        <para>TitlesCollectionのクローン。</para>
      </returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.TitlesCollection.Contains(GrapeCity.ActiveReports.Chart.Title)">
      <summary>コレクションが指定したタイトルを含むかどうかを決定します。</summary>
      <returns>
        <para>ブール型。コレクションが指定のパラメータを含む場合はTrue、それ以外の場合はFalse。</para>
      </returns>
      <param name="value">チェックするタイトル。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.TitlesCollection.CopyTo(GrapeCity.ActiveReports.Chart.Title[],System.Int32)">
      <summary>ターゲット配列の開始インデックスを指定して、コレクション全体を配列にコピーします。</summary>
      <param name="array">コレクションのコピー先の配列。</param>
      <param name="index">開始インデックス。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.TitlesCollection.IndexOf(GrapeCity.ActiveReports.Chart.Title)">
      <summary>コレクション内で値が最初に見つかった位置のインデックスを返します。</summary>
      <returns>
        <para>配列全体で値が最初に見つかった位置のインデックス。見つからなかった場合は、配列の下限値 -1。</para>
      </returns>
      <param name="value">コレクション内で検索するオブジェクト。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.TitlesCollection.Insert(System.Int32,GrapeCity.ActiveReports.Chart.Title)">
      <summary>タイトルをコレクションの指定したインデックス位置に挿入します。</summary>
      <param name="index">タイトルトの挿入位置のインデックス。</param>
      <param name="value">挿入するタイトル。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.TitlesCollection.Remove(GrapeCity.ActiveReports.Chart.Title)">
      <summary>最初に見つかった指定のタイトルをコレクションから削除します。</summary>
      <param name="value">削除するタイトル。</param>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.TitlesCollection.Item(System.Int32)">
      <summary>インデックスを指定して、コレクション項目を取得または設定します。</summary>
      <param name="index">項目のインデックス。</param>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.TitlesCollection.Item(System.String)">
      <summary>タイトル名を指定して、コレクション項目を取得または設定します。</summary>
      <param name="titleName">削除するタイトル。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.WallRange.#ctor">
      <summary>WallRangeオブジェクトの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.WallRange.Clone">
      <summary>WallRangeオブジェクトのクローンを作成します。</summary>
      <returns>
        <para>WallRangeオブジェクトのクローン。</para>
      </returns>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.WallRange.AdjacentAxes">
      <summary>隣接軸コレクションを取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.WallRange.Backdrop">
      <summary>壁面範囲の塗りつぶしに使用する背景情報を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.WallRange.Border">
      <summary>WallRangeの輪郭線の描画に使用する境界線情報を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.WallRange.DrawOnTopOfGridLines">
      <summary>グリッド線の上に壁面範囲を描画するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.WallRange.EndValue">
      <summary>壁面範囲の終了値を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.WallRange.PrimaryAxis">
      <summary>コレクション内の第1軸を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.WallRange.StartValue">
      <summary>壁面範囲の開始値を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.WallRange.Visible">
      <summary>壁面範囲が表示されているかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.WallRangesCollection.Add(GrapeCity.ActiveReports.Chart.WallRange)">
      <summary>WallRangeをコレクションに追加します。</summary>
      <param name="value">追加するWallRange。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.WallRangesCollection.AddRange(GrapeCity.ActiveReports.Chart.WallRange[])">
      <summary>WallRangesの配列をコレクションに追加します。</summary>
      <param name="value">コレクションに追加するWallRangesセット。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.WallRangesCollection.Clone">
      <summary>WallRangesコレクションのクローンを作成します。</summary>
      <returns>
        <para>WallRangesコレクションのクローン。</para>
      </returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.WallRangesCollection.Contains(GrapeCity.ActiveReports.Chart.WallRange)">
      <summary>コレクションが指定したWallRangeを含むかどうかを決定します。</summary>
      <returns>
        <para>ブール型。コレクションが指定したパラメータを含む場合はTrue、それ以外の場合はFalse。</para>
      </returns>
      <param name="value">チェックする壁面範囲。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.WallRangesCollection.CopyTo(GrapeCity.ActiveReports.Chart.WallRange[],System.Int32)">
      <summary>ターゲット配列の開始インデックスを指定して、コレクション全体を配列にコピーします。</summary>
      <param name="array">コレクションのコピー先の配列。</param>
      <param name="index">開始インデックス。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.WallRangesCollection.IndexOf(GrapeCity.ActiveReports.Chart.WallRange)">
      <summary>
        <para>コレクション内で値が最初に見つかった位置のインデックスを返します。</para>
      </summary>
      <returns>
        <para>配列全体で値が最初に見つかった位置のインデックス。見つからなかった場合は、配列の下限値 -1。</para>
      </returns>
      <param name="value">コレクション内で検索するオブジェクト。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.WallRangesCollection.Insert(System.Int32,GrapeCity.ActiveReports.Chart.WallRange)">
      <summary>WallRangeをコレクションの指定したインデックス位置に挿入します。</summary>
      <param name="index">WallRangeの挿入位置のインデックス。</param>
      <param name="value">挿入するWallRange。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.WallRangesCollection.Remove(GrapeCity.ActiveReports.Chart.WallRange)">
      <summary>最初に見つかった指定のWallRangeをコレクションから削除します。</summary>
      <param name="value">削除するWallRange。</param>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.WallRangesCollection.Item(System.Int32)">
      <summary>インデックスを指定して、コレクション項目を取得または設定します。</summary>
      <param name="index">項目のインデックス。</param>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.WallRangesCollection.Item(System.String)">
      <summary>壁面範囲の名前を指定して、コレクション項目を取得または設定します。</summary>
      <param name="wallRangeName">WallRangeの名前。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.XmlDataProvider.#ctor(System.Object,System.String)">
      <summary>XMLDataProviderクラスの新しいインスタンスを初期化します。</summary>
      <param name="dataSource">データソースのオブジェクト。</param>
      <param name="columnName">データの行が読み取られる列の名前。</param>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.XmlDataProvider.Count">
      <summary>データ数を参照します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.XmlDataProvider.Item(System.Int32)">
      <summary>
        <para>指定したインデックスのデータを参照します。インデックスが範囲を超えた場合は、nullが返されます。</para>
      </summary>
      <param name="index">項目のインデックス。</param>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.CustomDrawEventHandler">
      <summary>CustomDrawイベントを処理するメソッドを表します。</summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.GraphMouseEventHandler">
      <summary>GraphMouseイベントを処理するメソッドを表します。</summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.Annotations.AnchorPlacementType">
      <summary>注釈テキストのアンカー点の位置を指定します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Annotations.AnchorPlacementType.TopLeft">
      <summary>左上隅にアンカーします。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Annotations.AnchorPlacementType.Top">
      <summary>上側にアンカーします。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Annotations.AnchorPlacementType.TopRight">
      <summary>右上隅にアンカーします。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Annotations.AnchorPlacementType.Left">
      <summary>左側にアンカーします。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Annotations.AnchorPlacementType.Center">
      <summary>中央にアンカーします。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Annotations.AnchorPlacementType.Right">
      <summary>右上側にアンカーします。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Annotations.AnchorPlacementType.BottomLeft">
      <summary>左下隅にアンカーします。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Annotations.AnchorPlacementType.Bottom">
      <summary>下側にアンカーします。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Annotations.AnchorPlacementType.BottomRight">
      <summary>右下隅にアンカーします。</summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.Annotations.Annotation">
      <summary>
        <para>Annotationクラスはすべての注釈クラスの基本クラスです。</para>
        <para>この型のすべてのメンバの一覧については、Annotationメンバを参照してください。</para>
      </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.Annotations.AnnotationLine">
      <summary>
        <para>AnnotationLineクラスの設定を表します。</para>
        <para>この型のすべてのメンバの一覧については、AnnotationLineメンバを参照してください。</para>
      </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.Annotations.AnnotationsCollection">
      <summary>
        <para>AnnotationsCollectionクラスの設定を表します。</para>
        <para>この型のすべてのメンバの一覧については、AnnotationsCollectionメンバを参照してください。</para>
      </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.Annotations.AnnotationTextBar">
      <summary>
        <para>AnnotationTextBarクラスの設定を表します。</para>
        <para>この型のすべてのメンバの一覧については、AnnotationTextBarメンバを参照してください。</para>
      </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Annotations.Annotation.AnnotationClass">
      <summary>注釈の種類の名前を取得します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Annotations.AnnotationLine.#ctor">
      <summary>AnnotationLineクラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Annotations.AnnotationLine.Clone">
      <summary>AnnotationLineオブジェクトのクローンを作成します。</summary>
      <returns>
        <para>AnnotationLineオブジェクトのクローン。</para>
      </returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Annotations.AnnotationLine.ToString">
      <summary>現在のインスタンスの値を文字列表記に変換します。</summary>
      <returns>このインスタンスを表すSystem.Stringです。</returns>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Annotations.AnnotationLine.AnnotationClass">
      <summary>注釈の種類の名前を取得します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Annotations.AnnotationLine.EndConnection">
      <summary>
        <para>注釈線の終点の接続先のオブジェクトを取得または設定します。</para>
      </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Annotations.AnnotationLine.EndConnectionIndex">
      <summary>終点の接続先の注釈のアンカー点のインデックスを取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Annotations.AnnotationLine.EndPoint">
      <summary>注釈線の終点を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Annotations.AnnotationLine.Line">
      <summary>この注釈の描画に使用する線情報を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Annotations.AnnotationLine.Name">
      <summary>AnnotationLineの名前を文字列として取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Annotations.AnnotationLine.StartConnection">
      <summary>
        <para>注釈線の始点の接続先のオブジェクトを取得または設定します。</para>
      </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Annotations.AnnotationLine.StartConnectionIndex">
      <summary>始点の接続先の注釈のアンカー点のインデックスを取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Annotations.AnnotationLine.StartPoint">
      <summary>注釈線の始点を取得または設定します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Annotations.AnnotationsCollection.#ctor">
      <summary>AnnotationsCollectionクラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Annotations.AnnotationsCollection.#ctor(GrapeCity.ActiveReports.Chart.Annotations.Annotation[])">
      <summary>
        <para>配列を指定して、AnnotationsCollectionクラスの新しいインスタンスを初期化します。</para>
      </summary>
      <param name="annArray">
        <para>使用する注釈の配列を指定します。</para>
      </param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Annotations.AnnotationsCollection.Add(GrapeCity.ActiveReports.Chart.Annotations.Annotation)">
      <summary>注釈をコレクションに追加します。</summary>
      <param name="value">追加する注釈。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Annotations.AnnotationsCollection.AddRange(GrapeCity.ActiveReports.Chart.Annotations.Annotation[])">
      <summary>注釈の配列をコレクションに追加します。</summary>
      <param name="value">コレクションに追加する注釈セット。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Annotations.AnnotationsCollection.Clear">
      <summary>すべての項目をコレクションからクリアします。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Annotations.AnnotationsCollection.Clone">
      <summary>AnnotationsCollectionオブジェクトのクローンを作成します。</summary>
      <returns>
        <para>AnnotationsCollectionオブジェクトのクローン。</para>
      </returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Annotations.AnnotationsCollection.Contains(GrapeCity.ActiveReports.Chart.Annotations.Annotation)">
      <summary>コレクションが指定した注釈を含むかどうかを決定します。</summary>
      <returns>
        <para>ブール型。コレクションが指定のパラメータを含む場合はTrue、それ以外の場合はFalse。</para>
      </returns>
      <param name="value">チェックする注釈。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Annotations.AnnotationsCollection.CopyTo(GrapeCity.ActiveReports.Chart.Annotations.Annotation[],System.Int32)">
      <summary>ターゲット配列の開始インデックスを指定して、コレクション全体を配列にコピーします。</summary>
      <param name="array">コレクションのコピー先の配列。</param>
      <param name="index">開始インデックス。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Annotations.AnnotationsCollection.Dispose">
      <summary>このオブジェクトに関連付けられたリソースを解放します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Annotations.AnnotationsCollection.IndexOf(GrapeCity.ActiveReports.Chart.Annotations.Annotation)">
      <summary>コレクション内で値が最初に見つかった位置のインデックスを返します。</summary>
      <returns>
        <para>配列全体で値が最初に見つかった位置のインデックス。見つからなかった場合は、配列の下限値 -1。</para>
      </returns>
      <param name="value">コレクション内で検索するオブジェクト。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Annotations.AnnotationsCollection.Insert(System.Int32,GrapeCity.ActiveReports.Chart.Annotations.Annotation)">
      <summary>注釈をコレクションの指定したインデックス位置に挿入します。</summary>
      <param name="index">注釈の挿入位置のインデックス。</param>
      <param name="value">挿入する注釈。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Annotations.AnnotationsCollection.Remove(GrapeCity.ActiveReports.Chart.Annotations.Annotation)">
      <summary>最初に見つかった指定の注釈をコレクションから削除します。</summary>
      <param name="value">削除する注釈。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Annotations.AnnotationsCollection.RemoveAt(System.Int32)">
      <summary>指定した注釈をコレクションから削除します。</summary>
      <param name="index">削除する注釈のインデックス。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Annotations.AnnotationsCollection.ToArray">
      <summary>AnnotationsCollectionの要素を新しい配列にコピーします。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Annotations.AnnotationsCollection.Item(System.Int32)">
      <summary>指定したインデックスで項目を取得または設定します。</summary>
      <param name="index">項目のインデックス。</param>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Annotations.AnnotationsCollection.Item(System.String)">
      <summary>指定した名前で項目を取得または設定します。</summary>
      <param name="annotationName">
        <para>注釈の名前。</para>
      </param>
    </member>
    <member name="E:GrapeCity.ActiveReports.Chart.Annotations.AnnotationsCollection.Change">
      <summary>コレクションの内容が変更されるときに発生します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Annotations.AnnotationTextBar.#ctor">
      <summary>AnnotationTextBarクラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Annotations.AnnotationTextBar.Clone">
      <summary>AnnotationTextBarオブジェクトのクローンを作成します。</summary>
      <returns>
        <para>AnnotationTextBarオブジェクトのクローン。</para>
      </returns>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Annotations.AnnotationTextBar.AnchorPlacement">
      <summary>グラフ上の注釈テキストのアンカー点の位置を設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Annotations.AnnotationTextBar.AnchorPoint">
      <summary>選択したアンカーの配置に基づいて注釈テキストをアンカー点（X軸とY軸の値）を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Annotations.AnnotationTextBar.AnnotationClass">
      <summary>注釈の種類の名前を取得します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Annotations.AnnotationTextBar.Backdrop">
      <summary>注釈テキストの塗りつぶしに使用する背景情報を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Annotations.AnnotationTextBar.Font">
      <summary>注釈テキストの表示に使用するフォント情報を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Annotations.AnnotationTextBar.Height">
      <summary>注釈テキストの高さを取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Annotations.AnnotationTextBar.Line">
      <summary>注釈テキストの境界線の描画に使用する線情報を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Annotations.AnnotationTextBar.Name">
      <summary>AnnotationTextBarの名前を文字列として取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Annotations.AnnotationTextBar.RotationAngle">
      <summary>AnchorPointに対する注釈テキストの回転角度（度単位）を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Annotations.AnnotationTextBar.Text">
      <summary>注釈テキストに表示されるテキスト文字列を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Annotations.AnnotationTextBar.Width">
      <summary>注釈テキストの幅を取得または設定します。</summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode">
      <summary>オブジェクトの描画に使用するアンチエイリアス設定を指定します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode.Auto">
      <summary>親オブジェクトのアンチエイリアス設定を使用します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode.None">
      <summary>アンチエイリアス設定を使用しません。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode.Graphics">
      <summary>グラフィックスのみをアンチエイリアスします。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode.Text">
      <summary>テキストのみをアンチエイリアスします。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode.Both">
      <summary>グラフィックスとテキストの両方をアンチエイリアスします。</summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.Graphics.BackdropStyle">
      <summary>オブジェクトの背景の描画に使用するスタイルを指定します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Graphics.BackdropStyle.Transparent">
      <summary>背景を透明にします。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Graphics.BackdropStyle.Solid">
      <summary>背景に単色塗りつぶしを使用します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Graphics.BackdropStyle.Gradient">
      <summary>背景にグラデーション塗りつぶしを使用します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Graphics.BackdropStyle.Pattern">
      <summary>背景にパターン塗りつぶしを使用します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Graphics.BackdropStyle.Picture">
      <summary>背景にSystem.Drawing.Imageを使用します。</summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.Graphics.GradientType">
      <summary>描画するグラデーションの種類を指定します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Graphics.GradientType.Horizontal">
      <summary>水平方向のグラデーションを描画します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Graphics.GradientType.Vertical">
      <summary>垂直方向のグラデーションを描画します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Graphics.GradientType.DiagonalUp">
      <summary>左下から右上方向にグラデーションを描画します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Graphics.GradientType.DiagonalDown">
      <summary>左上から右下方向にグラデーションを描画します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Graphics.GradientType.FromCenter">
      <summary>中心から放射状のグラデーションを描画します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Graphics.GradientType.FromCorner">
      <summary>中心に向かって放射状のグラデーションを描画します。</summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.Graphics.LineStyle">
      <summary>使用する線スタイルを指定します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Graphics.LineStyle.None">
      <summary>線スタイルを使用しません。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Graphics.LineStyle.Solid">
      <summary>実線を描画します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Graphics.LineStyle.Dash">
      <summary>破線を描画します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Graphics.LineStyle.Dot">
      <summary>点線を描画します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Graphics.LineStyle.DashDot">
      <summary>１点鎖線を描画します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Graphics.LineStyle.DashDotDot">
      <summary>２点鎖線を描画します。</summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.Graphics.PicturePutStyle">
      <summary>背景内の画像の配置方法を指定します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Graphics.PicturePutStyle.Stretched">
      <summary>背景に合わせて画像を拡大します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Graphics.PicturePutStyle.Tiled">
      <summary>画像をタイル表示します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Graphics.PicturePutStyle.Centered">
      <summary>画像を中央配置します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Graphics.PicturePutStyle.Top">
      <summary>画像を上配置します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Graphics.PicturePutStyle.Left">
      <summary>画像を左配置します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Graphics.PicturePutStyle.Bottom">
      <summary>画像を下配置します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Graphics.PicturePutStyle.Right">
      <summary>画像を右配置します。</summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.Graphics.ProjectionType">
      <summary>使用する投影の種類を指定します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Graphics.ProjectionType.Identical">
      <summary>平面投影を使用します（Z座標は無視）。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Graphics.ProjectionType.Orthogonal">
      <summary>直交投影を使用します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Graphics.ProjectionType.Perspective">
      <summary>透視図を使用します。</summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.Graphics.TextAlign">
      <summary>矩形内のテキストの配置方法を指定します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Graphics.TextAlign.Left">
      <summary>テキストを左配置します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Graphics.TextAlign.Center">
      <summary>テキストを中央配置します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Graphics.TextAlign.Right">
      <summary>テキストを右配置します。</summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.Graphics.TextAnchor">
      <summary>テキスト形状をアンカーする方法を指定します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Graphics.TextAnchor.TopLeft">
      <summary>テキストを左上隅にアンカーします。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Graphics.TextAnchor.TopMiddle">
      <summary>テキストを上中央にアンカーします。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Graphics.TextAnchor.TopRight">
      <summary>テキストを右上隅にアンカーします。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Graphics.TextAnchor.MiddleLeft">
      <summary>テキストを左中央にアンカーします。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Graphics.TextAnchor.Center">
      <summary>テキストを中央にアンカーします。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Graphics.TextAnchor.MiddleRight">
      <summary>テキストを右中央にアンカーします。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Graphics.TextAnchor.BottomLeft">
      <summary>テキストを左下隅にアンカーします。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Graphics.TextAnchor.BottomMiddle">
      <summary>テキストを下中央にアンカーします。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Graphics.TextAnchor.BottomRight">
      <summary>テキストを右下隅にアンカーします。</summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.Graphics.Bar">
      <summary>
        <para>Bar領域の位置とサイズを格納します。</para>
        <para>この型のすべてのメンバの一覧については、Barメンバを参照してください。</para>
      </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Bar.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>パラメータを指定して、Barクラスの新しいインスタンスを初期化します。</summary>
      <param name="width">バーの幅。</param>
      <param name="height">バーの高さ。</param>
      <param name="depth">バーの奥行き。</param>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Bar.Depth">
      <summary>棒の奥行きを取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Bar.Height">
      <summary>
        <para>棒の高さを取得または設定します。</para>
      </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Bar.IsEmpty">
      <summary>棒が空かどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Bar.Width">
      <summary>
        <para>棒の幅を取得または設定します。</para>
      </summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.Graphics.Bar.Empty">
      <summary>プロパティが初期化されていないBar構造体の新しいインスタンスを示します。</summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.Graphics.Backdrop">
      <summary>
        <para>Chartオブジェクトの背景の描画に使用する設定を指定します。</para>
        <para>この型のすべてのメンバの一覧については、Backdropメンバを参照してください。</para>
      </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.Graphics.Line">
      <summary>
        <para>Lineオブジェクトのすべての視覚的な属性を保持します。</para>
        <para>この型のすべてのメンバの一覧については、Lineメンバを参照してください。</para>
      </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.Graphics.Point2d">
      <summary>
        <para>2Dの点を指定します。</para>
        <para>この型のすべてのメンバの一覧については、Point2dメンバを参照してください。</para>
      </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.Graphics.Point3d">
      <summary>
        <para>３次元空間の点を指定します。</para>
        <para>この型のすべてのメンバの一覧については、Point3dメンバを参照してください。</para>
      </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.#ctor">
      <summary>Backdropクラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.#ctor(GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode)">
      <summary>AntiAliasMode値を指定して、Backdropクラスの新しいインスタンスを初期化します。</summary>
      <param name="antiAliasMode">使用する列挙型のAntiAliasModeを指定します。設定可能な値はAuto、None、Graphics、Text、Bothのいずれかです。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.#ctor(System.Drawing.Color)">
      <summary>色を指定して、Backdropクラスの新しいインスタンスを初期化します。</summary>
      <param name="color">色１を指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.#ctor(System.Drawing.Color,GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode)">
      <summary>パラメータを指定して、Backdropクラスの新しいインスタンスを初期化します。</summary>
      <param name="color">色１を指定します。</param>
      <param name="antiAliasMode">使用する列挙型のAntiAliasModeを指定します。設定可能な値はAuto、None、Graphics、Text、Bothのいずれかです。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.#ctor(System.Drawing.Color,System.Byte)">
      <summary>パラメータを指定して、Backdropクラスの新しいインスタンスを初期化します。</summary>
      <param name="color">色１を指定します。</param>
      <param name="alpha">使用するアルファレベル（透明度）を指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.#ctor(System.Drawing.Color,System.Byte,GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode)">
      <summary>パラメータを指定して、Backdropクラスの新しいインスタンスを初期化します。</summary>
      <param name="color">色１を指定します。</param>
      <param name="alpha">使用するアルファレベル（透明度）を指定します。</param>
      <param name="antiAliasMode">使用する列挙型のAntiAliasModeを指定します。設定可能な値はAuto、None、Graphics、Text、Bothのいずれかです。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.#ctor(GrapeCity.ActiveReports.Chart.Graphics.GradientType,System.Drawing.Color,System.Drawing.Color)">
      <summary>パラメータを指定して、Backdropクラスの新しいインスタンスを初期化します。</summary>
      <param name="gradient">列挙型のGradientTypeを指定します。</param>
      <param name="color">色１を指定します。</param>
      <param name="color2">色２を指定します（ハッチとグラデーションスタイルに使用）</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.#ctor(GrapeCity.ActiveReports.Chart.Graphics.GradientType,System.Drawing.Color,System.Drawing.Color,GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode)">
      <summary>パラメータを指定して、Backdropクラスの新しいインスタンスを初期化します。</summary>
      <param name="gradient">列挙型のGradientTypeを指定します。</param>
      <param name="color">色１を指定します。</param>
      <param name="color2">色２を指定します（ハッチとグラデーションスタイルに使用）。</param>
      <param name="antiAliasMode">使用する列挙型のAntiAliasModeを指定します。設定可能な値はAuto、None、Graphics、Text、Bothのいずれかです。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.#ctor(System.Drawing.Drawing2D.HatchStyle,System.Drawing.Color,System.Drawing.Color)">
      <summary>パラメータを指定して、Backdropクラスの新しいインスタンスを初期化します。</summary>
      <param name="pattern">列挙型のHatchStyleを指定します。</param>
      <param name="color">色１を指定します。</param>
      <param name="color2">色２を指定します（ハッチとグラデーションスタイルに使用）。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.#ctor(System.Drawing.Drawing2D.HatchStyle,System.Drawing.Color,System.Drawing.Color,GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode)">
      <summary>パラメータを指定して、Backdropクラスの新しいインスタンスを初期化します。</summary>
      <param name="pattern">列挙型のHatchStyleを指定します。</param>
      <param name="color">色１を指定します。</param>
      <param name="color2">色２を指定します（ハッチとグラデーションスタイルに使用）。</param>
      <param name="antiAliasMode">使用する列挙型のAntiAliasModeを指定します。設定可能な値はAuto、None、Graphics、Text、Bothのいずれかです。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.#ctor(System.Drawing.Image,GrapeCity.ActiveReports.Chart.Graphics.PicturePutStyle)">
      <summary>パラメータを指定して、Backdropクラスの新しいインスタンスを初期化します。</summary>
      <param name="picture">背景に使用する画像を指定します。</param>
      <param name="pictureAlignment">使用する画像の配置を指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.#ctor(System.Drawing.Image,GrapeCity.ActiveReports.Chart.Graphics.PicturePutStyle,GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode)">
      <summary>パラメータを指定して、Backdropクラスの新しいインスタンスを初期化します。</summary>
      <param name="picture">背景に使用する画像を指定します。</param>
      <param name="pictureAlignment">使用する画像の配置を指定します。</param>
      <param name="antiAliasMode">使用する列挙型のAntiAliasModeを指定します。設定可能な値はAuto、None、Graphics、Text、Bothのいずれかです。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.#ctor(GrapeCity.ActiveReports.Chart.Graphics.BackdropStyle,System.Drawing.Color,System.Drawing.Color,GrapeCity.ActiveReports.Chart.Graphics.GradientType,System.Drawing.Drawing2D.HatchStyle,System.Drawing.Image,GrapeCity.ActiveReports.Chart.Graphics.PicturePutStyle)">
      <summary>パラメータを指定して、Backdropクラスの新しいインスタンスを初期化します。</summary>
      <param name="style">背景スタイルを指定します。</param>
      <param name="color">色１を指定します。</param>
      <param name="color2">色２を指定します（ハッチとグラデーションスタイルに使用）。</param>
      <param name="gradient">列挙型のGradientTypeを指定します。</param>
      <param name="pattern">列挙型のHatchStyleを指定します。</param>
      <param name="picture">背景に使用する画像を指定します。</param>
      <param name="pictureAlignment">使用する画像の配置を指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.#ctor(GrapeCity.ActiveReports.Chart.Graphics.BackdropStyle,System.Drawing.Color,System.Drawing.Color,GrapeCity.ActiveReports.Chart.Graphics.GradientType,System.Drawing.Drawing2D.HatchStyle,System.Drawing.Image,GrapeCity.ActiveReports.Chart.Graphics.PicturePutStyle,GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode)">
      <summary>パラメータを指定して、Backdropクラスの新しいインスタンスを初期化します。</summary>
      <param name="style">背景スタイルを指定します。</param>
      <param name="color">色１を指定します。</param>
      <param name="color2">色２を指定します（ハッチとグラデーションスタイルに使用）。</param>
      <param name="gradient">列挙型のGradientTypeを指定します。</param>
      <param name="pattern">列挙型のHatchStyleを指定します。</param>
      <param name="picture">背景に使用する画像を指定します。</param>
      <param name="pictureAlignment">使用する画像の配置を指定します。</param>
      <param name="antiAliasMode">使用する列挙型のAntiAliasModeを指定します。設定可能な値はAuto、None、Graphics、Text、Bothのいずれかです。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.#ctor(GrapeCity.ActiveReports.Chart.Graphics.BackdropStyle,System.Drawing.Color,System.Drawing.Color,GrapeCity.ActiveReports.Chart.Graphics.GradientType,System.Drawing.Drawing2D.HatchStyle,System.Drawing.Image,GrapeCity.ActiveReports.Chart.Graphics.PicturePutStyle,System.Byte)">
      <summary>パラメータを指定して、Backdropクラスの新しいインスタンスを初期化します。</summary>
      <param name="style">背景スタイルを指定します。</param>
      <param name="color">色１を指定します。</param>
      <param name="color2">色２を指定します（ハッチとグラデーションスタイルに使用）。</param>
      <param name="gradient">列挙型のGradientTypeを指定します。</param>
      <param name="pattern">列挙型のHatchStyleを指定します。</param>
      <param name="picture">背景に使用する画像を指定します。</param>
      <param name="pictureAlignment">使用する画像の配置を指定します。</param>
      <param name="alpha">使用するアルファレベル（透明度）を指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.#ctor(GrapeCity.ActiveReports.Chart.Graphics.BackdropStyle,System.Drawing.Color,System.Drawing.Color,GrapeCity.ActiveReports.Chart.Graphics.GradientType,System.Drawing.Drawing2D.HatchStyle,System.Drawing.Image,GrapeCity.ActiveReports.Chart.Graphics.PicturePutStyle,System.Byte,GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode)">
      <summary>パラメータを指定して、Backdropクラスの新しいインスタンスを初期化します。</summary>
      <param name="style">背景スタイルを指定します。</param>
      <param name="color">色１を指定します。</param>
      <param name="color2">色２を指定します（ハッチとグラデーションスタイルに使用）。</param>
      <param name="gradient">列挙型のGradientTypeを指定します。</param>
      <param name="pattern">列挙型のHatchStyleを指定します。</param>
      <param name="picture">背景に使用する画像を指定します。</param>
      <param name="pictureAlignment">使用する画像の配置を指定します。</param>
      <param name="alpha">使用するアルファレベル（透明度）を指定します。</param>
      <param name="antiAliasMode">使用する列挙型のAntiAliasModeを指定します。設定可能な値はAuto、None、Graphics、Text、Bothのいずれかです。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.Clone">
      <summary>背景のクローンを作成します。</summary>
      <returns>
        <para>Backdropのクローン。</para>
      </returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.CopyFrom(GrapeCity.ActiveReports.Chart.Graphics.Backdrop)">
      <summary>設定を指定して、Backdropオブジェクトを初期化します。</summary>
      <param name="backdrop">設定のコピー元のBackdropオブジェクト。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.Dispose">
      <summary>Backdropインスタンスをメモリから解放します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.Equals(System.Object)">
      <summary>Backdropオブジェクトを別のSystem.Objectと比較し、２つが等しいかどうか調べます。</summary>
      <returns>
        <para>ブール型。オブジェクトが等しい場合はTrueを返します。それ以外の場合はFalse。</para>
      </returns>
      <param name="obj">Backdropオブジェクトの比較対象となるSystem.Object。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。ハッシュアルゴリズムやハッシュテーブルのようなデータ構造での使用に適しています。</summary>
      <returns>このインスタンスのハッシュコードは、ハッシュテーブルのようなハッシュアルゴリズムまたはデータ構造で使用できます。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.Serialize(System.Runtime.Serialization.SerializationInfo,System.Boolean)">
      <summary>BackdropオブジェクトのXMLエンコードを作成するか、オブジェクトの状態をXMLエンコードから再構築します。</summary>
      <param name="info">Backdropオブジェクトのシリアル化または逆シリアル化に必要なデータを指定します。</param>
      <param name="isLoading">オブジェクトの再構築（True）とXMLエンコードの作成（False）のいずれかを指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.FitToRectangle(System.Drawing.RectangleF)">
      <summary>Backdropの矩形範囲を設定します。</summary>
      <param name="rectangle">範囲となる矩形。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.FitToRectangle(System.Drawing.PointF[])">
      <summary>Backdropの矩形範囲を設定します。</summary>
      <param name="points">矩形の上左、上右、下左、及び下右の点を含む配列。</param>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.Alpha">
      <summary>アルファレベル（透明度）を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.Color">
      <summary>背景の塗りつぶしに使用する色１を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.Color2">
      <summary>グラデーション効果とパターンに使用する色２を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.Gradient">
      <summary>背景に使用する列挙型のGradientTypeを取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.Pattern">
      <summary>
        <para>背景パターンに使用するHatchStyleを取得または設定します。</para>
      </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.Picture">
      <summary>背景に使用する画像を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.PictureAlignment">
      <summary>背景の画像配置を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.Style">
      <summary>
        <para>使用する背景の種類（単色塗りつぶし、グラデーションなど）を取得または設定します。</para>
      </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Line.#ctor">
      <summary>Lineクラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Line.#ctor(System.Drawing.Color)">
      <summary>実線、１pt線、色を指定して、Lineクラスの新しいインスタンスを初期化します。</summary>
      <param name="color">線の色を指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Line.#ctor(System.Drawing.Color,System.Int32)">
      <summary>
        <para>実線、太さ、色を指定して、Lineクラスの新しいインスタンスを初期化します。</para>
      </summary>
      <param name="color">線の色を指定します。</param>
      <param name="weight">線の太さを指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Line.#ctor(System.Drawing.Color,GrapeCity.ActiveReports.Chart.Graphics.LineStyle)">
      <summary>1pt線、色、スタイルを指定して、Lineクラスの新しいインスタンスを初期化します。</summary>
      <param name="color">線の色を指定します。</param>
      <param name="style">LineStyleを指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Line.#ctor(System.Drawing.Color,System.Int32,GrapeCity.ActiveReports.Chart.Graphics.LineStyle)">
      <summary>色、太さ、スタイルを指定して、Lineクラスの新しいインスタンスを初期化します。</summary>
      <param name="color">線の色を指定します。</param>
      <param name="weight">線の太さを指定します。</param>
      <param name="style">LineStyleを指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Line.Equals(System.Object)">
      <summary>Lineオブジェクトを別のSystem.Objectと比較し、２つが等しいかどうか調べます。</summary>
      <returns>
        <para>ブール型。２つが等しい場合はTrueを返します。それ以外の場合はFalse。</para>
      </returns>
      <param name="obj">Lineオブジェクトの比較対象となるSystem.Object。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Line.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。ハッシュアルゴリズムやハッシュテーブルのようなデータ構造での使用に適しています。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Line.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>SerializationInfoにターゲットオブジェクトのシリアル化に必要なデータを設定します。</summary>
      <param name="info">データを設定するSerializationInfo。</param>
      <param name="context">シリアル化のデスティネーション。</param>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Line.Color">
      <summary>線の色を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Line.Style">
      <summary>線の描画に使用するスタイルを取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Line.Weight">
      <summary>データ点の線の太さを取得または設定します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Point2d.#ctor">
      <summary>Point2dクラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Point2d.#ctor(System.Single,System.Single)">
      <summary>Point2dクラスの新しいインスタンスを初期化します。</summary>
      <param name="x">２次元の点のX座標。</param>
      <param name="y">２次元の点のY座標。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Point2d.#ctor(System.Drawing.PointF)">
      <summary>Point2dクラスの新しいインスタンスを初期化します。</summary>
      <param name="p">2D点を定義する浮動少数点のXとY座標の順序ペア。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Point2d.Clone">
      <summary>Point2dオブジェクトのクローンを作成します。</summary>
      <returns>
        <para>Point2dオブジェクトのクローン。</para>
      </returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Point2d.Equals(System.Object)">
      <summary>Point2dオブジェクトを別のSystem.Objectと比較し、２つが等しいかどうか調べます。</summary>
      <param name="obj">Point2dオブジェクトの比較対象となるSystem.Object。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Point2d.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。ハッシュアルゴリズムやハッシュテーブルのようなデータ構造での使用に適しています。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Point2d.ToString">
      <summary>現在のインスタンスの値を文字列表記に変換します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Point2d.Length">
      <summary>Point2dオブジェクトのベクタ長を取得します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Point2d.X">
      <summary>点のX座標を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Point2d.Y">
      <summary>点のY座標を取得または設定します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Point3d.#ctor">
      <summary>Point3dクラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Point3d.#ctor(System.Single,System.Single,System.Single)">
      <summary>Point3dクラスの新しいインスタンスを初期化します。</summary>
      <param name="x">３次元の点のX座標。</param>
      <param name="y">３次元の点のY座標。</param>
      <param name="z">３次元の点のZ座標。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Point3d.Clone">
      <summary>Point3dオブジェクトのクローンを作成します。</summary>
      <returns>
        <para>Point3dオブジェクトのクローン。</para>
      </returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Point3d.Equals(System.Object)">
      <summary>Point3dオブジェクトを別のSystem.Objectと比較し、２つが等しいかどうか調べます。</summary>
      <param name="obj">Point3dオブジェクトの比較対象となるSystem.Object。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Point3d.GetHashCode">
      <summary>
        <para>特定の型のハッシュ関数として機能します。ハッシュアルゴリズムやハッシュテーブルのようなデータ構造での使用に適しています。</para>
      </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Point3d.ToString">
      <summary>現在のインスタンスの値を文字列表記に変換します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Point3d.X">
      <summary>点のX座標を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Point3d.Y">
      <summary>点のY座標を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Point3d.Z">
      <summary>点のZ座標を取得または設定します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.BindingUtil.GetDataMembers(System.Object,System.Boolean)">
      <summary>
            データメンバを取得します。
            </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.Editors.AxesSelectEditor">
      <summary>
            内部使用のみ。
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Editors.AxesSelectEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
            Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"></see> method.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that can be used to gain additional context information.</param>
      <returns>A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle"></see> value that indicates the style of editor used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"></see> method. If the <see cref="T:System.Drawing.Design.UITypeEditor"></see> does not support this method, then <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"></see> will return <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None"></see>.</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Editors.AxesSelectEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
            Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"></see> method.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that can be used to gain additional context information.</param>
      <param name="provider">サービスを取得するためにこのエディタが使用できる<see cref="T:System.IServiceProvider"></see>。</param>
      <param name="value">編集するオブジェクト。</param>
      <returns>オブジェクトの新しい値。オブジェクトの値が変更されていない場合に、これは渡されたものと同じオブジェクトを返す必要があります。</returns>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.Editors.DoubleArrayEditor">
      <summary>
            内部使用のみ。
            </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.Editors.DropDownEditor">
      <summary>
            内部使用のみ。
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Editors.DropDownEditor.PaintValueImpl(System.Object,System.Object,System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
      </summary>
      <param name="value">
      </param>
      <param name="currentValue">Is equal to value for simple draw, and represents selected item in listbox</param>
      <param name="g">
      </param>
      <param name="bounds">
      </param>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.Editors.LabelsCollectionEditor">
      <summary>
            内部使用のみ。
            </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.MouseEnabledComponent">
      <summary>
            ユーザと対話できるコンポーネントのクラスです。
            </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.MouseEnabledItem">
      <summary>
            ユーザと対話できる項目のクラスです。
            </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.DrawCustomizableItem">
      <summary>
            オーバーライド可能な項目のクラスです。
            </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.Item">
      <summary>
            Itemクラスは、isDirtyフラグを処理でき、描画を自動的に更新できる項目の階層をサポートします。
            </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.IGraphItem">
      <summary>
            内部使用のみ。 Base interface for chart's items.
            </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.IGraphXmlSerializable">
      <summary>
            IChartXmlSerializableインターフェイス。
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.IGraphXmlSerializable.ToXml(System.String,GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext)">
      <summary>
            XMLノードにオブジェクトの状態を格納します。
            </summary>
      <param name="nodeName">ノード名</param>
      <param name="context">
      </param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.IGraphXmlSerializable.FromXml(System.Xml.XmlNode,GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext)">
      <summary>
            XMLノードからオブジェクトの状態を読み込みます。
            </summary>
      <param name="node">
      </param>
      <param name="context">
      </param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Item.InternalGetParents">
      <summary>
            内部配列を返します。
            </summary>
      <returns>いくつかのオブジェクトの配列を返します。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Item.CheckPropertiesValidityImpl(GrapeCity.ActiveReports.Chart.SharpGraph)">
      <summary>
            項目によるプロパティ間の依存関係を確認する必要がある場合は、このメソッドをオーバーライドします。
            デフォルトでは、このメソッドは何も実行しません。
            エラーが発生したときに'ArgumentException'例外がスローされます。
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Item.NotifyOnAnyPropertyChange(System.Object)">
      <summary>
            プロパティ値が変更されたときに呼び出されます。
            </summary>
      <param name="newValue">
      </param>
    </member>
    <member name="E:GrapeCity.ActiveReports.Chart.Item.Change">
      <summary>
            内部プロパティを含め、このオブジェクトの内容が変更されるときに発生します。
            </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.ICustomDrawer">
      <summary>
            ICustomDrawerインターフェイス。
            </summary>
    </member>
    <member name="E:GrapeCity.ActiveReports.Chart.ICustomDrawer.PreDraw">
      <summary>
            グラフコアでこのオブジェクト上に描画を開始する前に発生します。
            </summary>
    </member>
    <member name="E:GrapeCity.ActiveReports.Chart.ICustomDrawer.PostDraw">
      <summary>
            グラフコアでこのオブジェクト上にすべての描画を完了した後に発生します。
            </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.DrawCustomizableItem.AntiAliasMode">
      <summary>
            現在のオブジェクトを描画するアンチエイリアスモードを指定します。
            </summary>
    </member>
    <member name="E:GrapeCity.ActiveReports.Chart.DrawCustomizableItem.PreDraw">
      <summary>
            グラフコアでこのオブジェクト上に描画を開始する前に発生します。
            </summary>
    </member>
    <member name="E:GrapeCity.ActiveReports.Chart.DrawCustomizableItem.PostDraw">
      <summary>
            グラフコアでこのオブジェクト上にすべての描画を完了した後に発生します。
            </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.IMouseEnabled">
      <summary>
            IMouseEnabledインターフェイス。
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.IMouseEnabled.NeedMouseHandling">
      <summary>
            コントロールによりマウスイベントが処理されるかどうかをを指定します。
            </summary>
      <returns>
      </returns>
    </member>
    <member name="E:GrapeCity.ActiveReports.Chart.IMouseEnabled.MouseMove">
      <summary>
            マウスポインタがコントロールの上を移動するときに発生します。
            </summary>
    </member>
    <member name="E:GrapeCity.ActiveReports.Chart.IMouseEnabled.MouseDown">
      <summary>
            マウスポインタがコントロールの上に置かれ、マウスボタンが押されるときに発生します。
            </summary>
    </member>
    <member name="E:GrapeCity.ActiveReports.Chart.IMouseEnabled.MouseEnter">
      <summary>
            マウスポインタがコントロールに入るときに発生します。
            </summary>
    </member>
    <member name="E:GrapeCity.ActiveReports.Chart.IMouseEnabled.MouseHover">
      <summary>
            マウスポインタがコントロールの上をホバリングしているときに発生します。
            </summary>
    </member>
    <member name="E:GrapeCity.ActiveReports.Chart.IMouseEnabled.MouseLeave">
      <summary>
            マウスポインタがコントロールから離れるときに発生します。
            </summary>
    </member>
    <member name="E:GrapeCity.ActiveReports.Chart.IMouseEnabled.MouseUp">
      <summary>
            マウスポインタがコントロールの上に置かれ、マウスボタンが解放されるときに発生します。
            </summary>
    </member>
    <member name="E:GrapeCity.ActiveReports.Chart.IMouseEnabled.MouseWheel">
      <summary>
            コントロールがフォーカスを持っているときにマウスホイールが移動すると発生します。
            </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.IMouseEnabled.ContextMenu">
      <summary>
            コントロールに関連付けられたショートカットメニューを取得または設定します。
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.MouseEnabledItem.OnMouseMove(GrapeCity.ActiveReports.Chart.GraphMouseEventArgs)">
      <summary>
        <see cref="E:MouseMove">
        </see>イベントを発生させます。
            </summary>
      <param name="e">イベントデータを含む<see cref="T:GrapeCity.ActiveReports.Chart.GraphMouseEventArgs"></see>。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.MouseEnabledItem.OnMouseDown(GrapeCity.ActiveReports.Chart.GraphMouseEventArgs)">
      <summary>
        <see cref="E:MouseDown">
        </see>イベントを発生させます。
            </summary>
      <param name="e">イベントデータを含む<see cref="T:GrapeCity.ActiveReports.Chart.GraphMouseEventArgs"></see>。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.MouseEnabledItem.OnMouseEnter(GrapeCity.ActiveReports.Chart.GraphMouseEventArgs)">
      <summary>
        <see cref="E:MouseEnter">
        </see>イベントを発生させます。
            </summary>
      <param name="e">イベントデータを含む<see cref="T:GrapeCity.ActiveReports.Chart.GraphMouseEventArgs"></see>。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.MouseEnabledItem.OnMouseHover(GrapeCity.ActiveReports.Chart.GraphMouseEventArgs)">
      <summary>
        <see cref="E:MouseHover">
        </see>イベントを発生させます。
            </summary>
      <param name="e">イベントデータを含む<see cref="T:GrapeCity.ActiveReports.Chart.GraphMouseEventArgs"></see>。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.MouseEnabledItem.OnMouseLeave(GrapeCity.ActiveReports.Chart.GraphMouseEventArgs)">
      <summary>
        <see cref="E:MouseLeave">
        </see>イベントを発生させます。
            </summary>
      <param name="e">イベントデータを含む<see cref="T:GrapeCity.ActiveReports.Chart.GraphMouseEventArgs"></see>。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.MouseEnabledItem.OnMouseUp(GrapeCity.ActiveReports.Chart.GraphMouseEventArgs)">
      <summary>
        <see cref="E:MouseUp">
        </see>イベントを発生させます。
            </summary>
      <param name="e">イベントデータを含む<see cref="T:GrapeCity.ActiveReports.Chart.GraphMouseEventArgs"></see>。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.MouseEnabledItem.OnMouseWheel(GrapeCity.ActiveReports.Chart.GraphMouseEventArgs)">
      <summary>
        <see cref="E:MouseWheel">
        </see>イベントを発生させます。
            </summary>
      <param name="e">イベントデータを含む<see cref="T:GrapeCity.ActiveReports.Chart.GraphMouseEventArgs"></see>。</param>
    </member>
    <member name="E:GrapeCity.ActiveReports.Chart.MouseEnabledItem.MouseMove">
      <summary>
            マウスポインタがコントロールの上を移動するときに発生します。
            </summary>
    </member>
    <member name="E:GrapeCity.ActiveReports.Chart.MouseEnabledItem.MouseDown">
      <summary>
            マウスポインタがコントロールの上に置かれ、マウスボタンが押されるときに発生します。
            </summary>
    </member>
    <member name="E:GrapeCity.ActiveReports.Chart.MouseEnabledItem.MouseEnter">
      <summary>
            マウスポインタがコントロールに入るときに発生します。
            </summary>
    </member>
    <member name="E:GrapeCity.ActiveReports.Chart.MouseEnabledItem.MouseHover">
      <summary>
            マウスポインタがコントロールの上をホバリングしているときに発生します。
            </summary>
    </member>
    <member name="E:GrapeCity.ActiveReports.Chart.MouseEnabledItem.MouseLeave">
      <summary>
            マウスポインタがコントロールから離れるときに発生します。
            </summary>
    </member>
    <member name="E:GrapeCity.ActiveReports.Chart.MouseEnabledItem.MouseUp">
      <summary>
            マウスポインタがコントロールの上に置かれ、マウスボタンが解放されるときに発生します。
            </summary>
    </member>
    <member name="E:GrapeCity.ActiveReports.Chart.MouseEnabledItem.MouseWheel">
      <summary>
            コントロールがフォーカスを持っているときにマウスホイールが移動すると発生します。
            </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.MouseEnabledItem.ContextMenu">
      <summary>
            コントロールに関連付けられたショートカットメニューを取得または設定します。
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.MouseEnabledComponent.Dispose">
      <summary>
            アンマネージリソースの解放またはリセットに関連付けられたアプリケーション定義のタスクを実行します。
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.MouseEnabledComponent.ToString">
      <summary>
            このインスタンスを表す<see cref="T:System.String"></see>を返します。
            </summary>
      <returns>このインスタンスを表す<see cref="T:System.String"></see>。</returns>
    </member>
    <member name="E:GrapeCity.ActiveReports.Chart.MouseEnabledComponent.Disposed">
      <summary>
            インスタンスが破棄されたときに発生します。
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.AxisBase.#ctor">
      <summary>
        <see cref="T:GrapeCity.ActiveReports.Chart.AxisBase">
        </see>クラスの新しいインスタンスを初期化します。
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.AxisBase.CloneTo(GrapeCity.ActiveReports.Chart.AxisBase)">
      <summary>
            現在のオブジェクトのクローンを作成します。
            </summary>
      <param name="clone">
      </param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.AxisBase.ShouldSerializeScroll">
      <summary>
            このメソッドは、リフレクションを使用してシリアライザによって呼び出されます。
            これは、DesignerSerializationVisibilityを動的に指定するための標準的な方法です。
            </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.AxesCollection.Count">
      <summary>
        <see cref="T:System.Collections.CollectionBase">
        </see>インスタンスに含まれる要素の数を取得します。このプロパティをオーバーライドすることができません。
            </summary>
      <value>数。</value>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.AxesCollection.Capacity">
      <summary>
        <see cref="T:System.Collections.CollectionBase">
        </see>に格納できる要素の数を取得または設定します。
            </summary>
      <value>
        <see cref="T:System.Collections.CollectionBase">
        </see>に格納できる要素の数。</value>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.Converter">
      <summary>
            内部使用のみ。
            </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.TxExpandableObjectConverter">
      <summary>
            内部使用のみ。
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.Converter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            フォームではなく、リソースで格納するために必要な初期化コードです。
            
        </member>
    <member name="T:GrapeCity.ActiveReports.Chart.Border.Converter">
      <summary>
            内部使用のみ。
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Border.Converter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            required to store initialization code in form not in resources
            
        </member>
    <member name="T:GrapeCity.ActiveReports.Chart.ColorPaletteTypeConverter">
      <summary>
            内部使用のみ。
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.CustomProperties.GetConverter">
      <summary>
            コンポーネントのこのインスタンスの型コンバータを返します。
            </summary>
      <returns>このオブジェクトのコンバータである<see cref="T:System.ComponentModel.TypeConverter"></see>を返します。このオブジェクトの<see cref="T:System.ComponentModel.TypeConverter"></see>がない場合はnullを返します。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.CustomProperties.GetEditor(System.Type)">
      <summary>
            コンポーネントのこのインスタンスに対して、指定された型のエディターを返します。
            </summary>
      <param name="editorBaseType">このオブジェクトのエディターを表す<see cref="T:System.Type"></see>。</param>
      <returns>このオブジェクトの指定された型の<see cref="T:System.Object"></see>、またはエディターが見つからない場合はnullを返します。</returns>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.ICustomPropertyValueValidator">
      <summary>
            ICustomPropertyValueValidatorインタフェース。
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.ICustomPropertyValueValidator.Validate(System.Object)">
      <summary>
            値が有効でない場合は、ArgumentExceptionがスローされます。
            </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.NumericRangeValidator">
      <summary>
            このクラスは継承できません。
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.NumericRangeValidator.#ctor(System.Double,System.Boolean)">
      <summary>
        <see cref="T:GrapeCity.ActiveReports.Chart.NumericRangeValidator">
        </see>クラスの新しいインスタンスを初期化します。
            </summary>
      <param name="min">最小値。</param>
      <param name="isInclusive">
        <c>true</c>に設定する場合は、[is inclusive]。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.NumericRangeValidator.#ctor(System.Double,System.Double,System.Boolean)">
      <summary>
        <see cref="T:GrapeCity.ActiveReports.Chart.NumericRangeValidator">
        </see>クラスの新しいインスタンスを初期化します。
            </summary>
      <param name="min">最小値。</param>
      <param name="max">最大値。</param>
      <param name="isInclusive">
        <c>true</c>に設定する場合は、[is inclusive]。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.NumericRangeValidator.Validate(System.Object)">
      <summary>
            値が有効でない場合は、ArgumentExceptionがスローされます。
            </summary>
      <param name="value">値。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.NumericRangeValidator.GetAnyValidValue">
      <summary>
            任意の有効な値を取得します。
            </summary>
      <returns>System.Object.</returns>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.GridLayout.Converter">
      <summary>
            内部使用のみ。
            </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext.StrictImport">
      <summary>
            デフォルトは「False」です。「True」に設定すると、エラーが発生した場合はXMLのインポート処理を一旦停止し、例外をスローします。
            「False」に設定すると、インポート処理が続きます。この動作を制御するには、xmlファイルに「SharpGraphルート要素のstrict属性を使用します。
            </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.LegendItemsCollection.Count">
      <summary>
        <see cref="T:System.Collections.CollectionBase">
        </see>インスタンスに格納されている要素の数を取得します。このプロパティはオーバーライドできません。
            </summary>
      <value>
        <see cref="T:System.Collections.CollectionBase">
        </see>に格納されている要素の数。</value>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.LegendItemsCollection.Capacity">
      <summary>
        <see cref="T:System.Collections.CollectionBase">
        </see>に格納できる要素の数を取得または設定します。
            </summary>
      <value>
        <see cref="T:System.Collections.CollectionBase">
        </see>に格納できる要素の数。</value>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.NullableBoolean">
      <summary>
            ブール型はnull値を受け入れます。
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.NullableBoolean.#ctor(System.Boolean)">
      <summary>
            デフォルトはctorです。
            </summary>
      <param name="value">デフォルト値として使用するブール値。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.NullableBoolean.op_Implicit(System.Boolean)~GrapeCity.ActiveReports.Chart.NullableBoolean">
      <summary>
        <see cref="T:System.Boolean">
        </see>から<see cref="T:GrapeCity.ActiveReports.Chart.NullableBoolean"></see>への暗黙的な変換を許可するオペレータ。
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.NullableBoolean.op_Explicit(GrapeCity.ActiveReports.Chart.NullableBoolean)~System.Boolean">
      <summary>
        <see cref="T:GrapeCity.ActiveReports.Chart.NullableBoolean">
        </see>から<see cref="T:System.Boolean"></see>への明示的な変換を許可するオペレータ。
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.NullableBoolean.op_Equality(GrapeCity.ActiveReports.Chart.NullableBoolean,GrapeCity.ActiveReports.Chart.NullableBoolean)">
      <summary>
            等値演算子のオーバーロード。
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.NullableBoolean.op_Inequality(GrapeCity.ActiveReports.Chart.NullableBoolean,GrapeCity.ActiveReports.Chart.NullableBoolean)">
      <summary>
            非等値演算子のオーバーロード。
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.NullableBoolean.Equals(System.Object)">
      <summary>
            現在のインスタンスが、指定した<see cref="T:System.Object"></see>の値と同じかどうかを判断します。
            </summary>
      <param name="other">現在のインスタンスと比較する<see cref="T:System.Object"></see>。</param>
      <returns>
        指定された<see cref="T:System.Object"></see>がこのインスタンスと等しい場合は<c>true</c>、それ以外の場合は<c>false</c>。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.NullableBoolean.Equals(GrapeCity.ActiveReports.Chart.NullableBoolean)">
      <summary>
            現在のインスタンスが、指定したotherオブジェクトの値と同じかどうかを判断します。
            </summary>
      <param name="other">otherオブジェクト。</param>
      <returns>
        XXXXの場合は<c>True</c>、それ以外の場合は<c>False</c>。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.NullableBoolean.GetHashCode">
      <summary>
            現在のインスタンスのハッシュコードを返します。
            </summary>
      <returns>特定の型のハッシュ関数として機能します。ハッシュアルゴリズムやハッシュテーブルのようなデータ構造での使用に適しています。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.NullableBoolean.ToString">
      <summary>
            このインスタンスを表す<see cref="T:System.String"></see>を返します。
            </summary>
      <returns>このインスタンスを表す<see cref="T:System.String"></see>です。</returns>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.NullableBoolean.HasValue">
      <summary>
            null値がある場合はFalse、それ以外の場合はTrueを返します。
            </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.NullableBoolean.Value">
      <summary>
        <see cref="T:System.Boolean">
        </see>の値を取得します。
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Series.ShouldSerializePoints">
      <summary>
            このメソッドは、リフレクションを使用してシリアライザによって呼び出されます。
            </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.GraphReferenceConverter.ObjectType">
      <summary>
            空のctorを取得するためのオブジェクト型を取得します。
            </summary>
    </member>
    <member name="E:GrapeCity.ActiveReports.Chart.SeriesCollection.SeriesCollectionChangedHandler">
      <summary>
            ValueMemberxおよびValueMemberYでの変更を処理する時に使用されます。
            </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.WallRangesCollection.Count">
      <summary>
        <see cref="T:System.Collections.CollectionBase">
        </see>インスタンスに格納されている要素の数を取得します。このプロパティはオーバーライドできません。
            </summary>
      <value>
        <see cref="T:System.Collections.CollectionBase">
        </see>インスタンスに格納されている要素。</value>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.WallRangesCollection.Capacity">
      <summary>
        <see cref="T:System.Collections.CollectionBase">
        </see>に格納できる要素の数を取得または設定します。
            </summary>
      <value>
        <see cref="T:System.Collections.CollectionBase">
        </see>に格納できる要素の数。</value>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Annotations.AnnotationsCollection.Count">
      <summary>
        <see cref="T:System.Collections.CollectionBase">
        </see>インスタンスに格納されている要素の数を取得します。このプロパティはオーバーライドできません。
            </summary>
      <value>
        <see cref="T:System.Collections.CollectionBase">
        </see>インスタンスに格納されている要素の数。</value>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Annotations.AnnotationsCollection.Capacity">
      <summary>
        <see cref="T:System.Collections.CollectionBase">
        </see>に格納できる要素の数を取得または設定します。
            </summary>
      <value>
        <see cref="T:System.Collections.CollectionBase">
        </see>に格納できる要素の数。</value>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.ICustomBorderDrawer">
      <summary>
            カスタム境界線描画用のインターフェイスを指定します。
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.ICustomBorderDrawer.MeasureBorder">
      <summary>
            境界線を返します。
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.ICustomBorderDrawer.DrawBorder(System.Drawing.RectangleF,System.Object)">
      <summary>
            境界線を描画します。
            </summary>
      <param name="drawSpace">境界線を描画する矩形。</param>
      <param name="drawer">描画用のインターフェイス。</param>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.UICommand.Wizard">
      <summary>
            グラフ ウィザードを表示します。
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.SharpGraph.SetCultureProvider(System.Func{System.Globalization.CultureInfo})">
      <summary>
            カルチャ固有の書式設定を指定するプロバイダーを設定します。
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.SharpGraph.RefreshData">
      <summary>
            チャートを再描画するときにすべてのデータがロードできるように内部キャッシュをクリアします。
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.SharpGraph.SetDesignMode(System.Boolean)">
      <summary>
            デザインモードを有効または無効にします。
            </summary>
      <param name="isDesignMode">
        デザインモードを有効にする場合は<c>true</c>。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.SharpGraph.OnContextMenu(System.Drawing.Point)">
      <summary>
            コンテキストメニューを開く時に発生します。
            </summary>
      <param name="p">The p.</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.SharpGraph.ClearInvalidBindings">
      <summary>
            無効なバインディングを削除します。
            </summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.SharpGraph.ParentHost">
      <summary>
            ChartControl : CHART_WIZARD_DATASOURCEからDataDyanmics.ActiveReports.ChartControlに設定されます。
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.SharpGraph.BeginInit">
      <summary>
             オブジェクトに初期化が開始されたことを通知します。
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.SharpGraph.EndInit">
      <summary>
            オブジェクトに初期化が完了したことを通知します。
            </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.SharpGraph.DataSourceDirect">
      <summary>
            データソースを直接取得または設定します。
            </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.SharpGraph.CurrentDesigner">
      <summary>
            現在操作中のデザイナーを取得または設定します。
            </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.SharpGraph.BackColor">
      <summary>
            コントロール領域の背景色を取得または設定します。
            </summary>
      <value>現在の背景色。</value>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.SharpGraph.AccessibleDescription">
      <summary>
            ユーザー補助クライアント アプリケーションによって使用される、コントロールの説明を取得または設定します。
            </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.SharpGraph.AccessibleName">
      <summary>
            ユーザー補助クライアント アプリケーションによって使用されるコントロールの名前を取得または設定します。
            </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.SharpGraph.AccessibleRole">
      <summary>
            コントロールのアクセスできる役割を取得または設定します。
            </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.SharpGraph.BackgroundImage">
      <summary>
            コントロールに表示される背景イメージを取得または設定します。
            </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.SharpGraph.Font">
      <summary>
            コントロールに表示されるテキストのフォントを取得または設定します。
            </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.SharpGraph.ForeColor">
      <summary>
            コントロールの前景色を取得または設定します。
            </summary>
      <value>現在の前景色。</value>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.SharpGraph.RightToLeft">
      <summary>
            コントロールの要素が、右から左に表記されるフォントを使用するロケールをサポートするように配置されているかどうかを示す値を取得または設定します。 
            </summary>
      <value>RightToLeftの値。</value>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true">
        </IPermission>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true">
        </IPermission>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence">
        </IPermission>
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true">
        </IPermission>
      </PermissionSet>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.SharpGraph.Text">
      <summary>
            このコントロールに関連付けられているテキストを取得または設定します。
            </summary>
      <value>テキスト。</value>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.SharpGraph.ImeMode">
      <summary>
            コントロールのIME（Input Method Editor）モードを取得または設定します。
            </summary>
      <value>IMEモード。</value>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true">
        </IPermission>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true">
        </IPermission>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence">
        </IPermission>
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true">
        </IPermission>
      </PermissionSet>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.SharpGraph.CausesValidation">
      <summary>
            そのコントロールが原因で、フォーカスを受け取ると検証が必要なコントロールに対して、検証が実行されるかどうかを示す値を取得または設定します。 
            </summary>
      <value>
        検証が実行される場合は場合はTrue、それ以外の場合はFalse。</value>
    </member>
    <member name="E:GrapeCity.ActiveReports.Chart.SharpGraph.SetDirtyFired">
      <summary>
            SetDirtyが呼び出されたときに発生します。
            </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.SharpGraph.IChartDesigner">
      <summary>
            内部使用のみ。
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.SharpGraph.IChartDesigner.RaiseChanging">
      <summary>
            内部使用のみ。
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.SharpGraph.IChartDesigner.RaiseChanged">
      <summary>
            内部使用のみ。
            </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.SharpGraph.DataSourceConverter">
      <summary>
            内部使用のみ。
            </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.XYValueChangedEventHandler">
      <summary>
            ValueMembersXおよびValueMembersYを処理するメソッドを表します。
            </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.XYVAlueChangedEventArgs">
      <summary>
            ValueMembersXおよびValuemembersYの変更を保持します。
            </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.XYVAlueChangedEventArgs.PropertyName">
      <summary>
            プロパティの名前を取得します。
            </summary>
      <value>プロパティの名前。</value>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.XYVAlueChangedEventArgs.OldValue">
      <summary>
            古い値を取得します。
            </summary>
      <value>古い値。</value>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.XYVAlueChangedEventArgs.NewValue">
      <summary>
            新しい値を取得します。
            </summary>
      <value>新しい値。</value>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.DoubleConverter">
      <summary>
            このクラスは、vs.netのプロパティグリッドの値での視覚化エラーを修正するために作成されています。たとえば、ダブルの変わりに「0.2」の記述などです。
            </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Line.IsDirty">
      <summary>
        <code>Item.IsDirty</code>をオーバーライドします。オブジェクトを再描画するかどうかを指定します。
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Point2d.op_Implicit(GrapeCity.ActiveReports.Chart.Graphics.Point2d)~System.Drawing.PointF">
      <summary>
        <code>PointF</code>への暗黙的な変換を行います。
            </summary>
      <param name="p">新しいPointFの座標を指定するPoint2d。</param>
      <returns>Point2dが指定された座標を格納する新しいPointFです。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Point2d.op_Implicit(System.Drawing.PointF)~GrapeCity.ActiveReports.Chart.Graphics.Point2d">
      <summary>
        <code>PointF</code>への暗黙的な変換を行います。
            </summary>
      <param name="p">新しいPointFの座標を指定するPoint2d。</param>
      <returns>Point2dが指定された座標を格納する新しいPointFです。</returns>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Point2d.IsDirty">
      <summary>
        <code>Item.IsDirty</code>をオーバーライドします。オブジェクトを再描画するかどうかを指定します。
            </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Point3d.IsDirty">
      <summary>
        <code>Item.IsDirty</code>をオーバーライドします。オブジェクトを再描画するかどうかを指定します。
            </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.InternalC.StdCollectionTypeConverter">
      <summary>
            内部使用のみ。
            </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.Styling.StyleEditor">
      <summary>
            グラフデザイナの内部クラスです。
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Styling.StyleEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)">
        </see>メソッドで使用するエディター スタイルを取得します。
            </summary>
      <param name="context">コンポーネントに関するコンテキスト情報を提供する<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <returns>
        <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)">
        </see>メソッドで使用するエディター スタイルを表す<see cref="T:System.Drawing.Design.UITypeEditorEditStyle"></see>を返します。このメソッドは<see cref="T:System.Drawing.Design.UITypeEditor"></see>でサポートされていない場合は、<see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"></see>は<see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None"></see>を返します。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Styling.StyleEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
        <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle">
        </see>メソッドで提供されたエディター スタイルを使用して、指定したオブジェクトの値を編集します。
            </summary>
      <param name="context">コンポーネントに関するコンテキスト情報を提供する<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <param name="provider">このエディターがサービスを取得するために使用できる<see cref="T:System.IServiceProvider"></see>。</param>
      <param name="value">編集対象のオブジェクト。</param>
      <returns>オブジェクトの新しい値。オブジェクトの値が変更されていない場合は、渡されたオブジェクトがそのまま返されます。</returns>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.BindingUtil">
      <summary>
            Utility class. For internal use only.
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.BindingUtil.CheckDataSource(System.Object)">
      <summary>
            データソースを確認します。
            </summary>
      <param name="dataSource">確認するデータソース。</param>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.Editors.BindingEditor">
      <summary>
            内部使用のみ。
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Editors.BindingEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
        <see cref="M:GrapeCity.ActiveReports.Chart.Editors.BindingEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
        </see>メソッドによって指定されるエディタスタイルを使用して、指定されたオブジェクトの値を編集します。
            </summary>
      <param name="context">追加のコンテキスト情報を取得するために使用できる<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <param name="provider">サービスを取得するためにこのエディタが使用できる<see cref="T:System.IServiceProvider"></see>。</param>
      <param name="value">編集するオブジェクト。</param>
      <returns>オブジェクトの新しい値。オブジェクトの値が変更されていない場合に、これは渡されたものと同じオブジェクトを返す必要があります。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Editors.BindingEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <see cref="M:GrapeCity.ActiveReports.Chart.Editors.BindingEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
        </see>メソッドで使用されるエディタスタイルを取得します。
            </summary>
      <param name="context">追加のコンテキスト情報を取得するために使用できる<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <returns>
        <see cref="M:GrapeCity.ActiveReports.Chart.Editors.BindingEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
        </see>メソッドで使用されるエディタのスタイルを示す<see cref="T:System.Drawing.Design.UITypeEditorEditStyle"></see>値。<see cref="T:System.Drawing.Design.UITypeEditor"></see>がこのメソッドをサポートしていない場合、<see cref="M:GrapeCity.ActiveReports.Chart.Editors.BindingEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)"></see>は<see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None"></see>を返します。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Editors.BindingEditor.Dispose">
      <summary>
            アンマネージリソースの解放またはリセットに関連付けられているアプリケーション定義のタスクを実行します。
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Editors.DoubleArrayEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <see cref="M:GrapeCity.ActiveReports.Chart.Editors.DoubleArrayEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
        </see>メソッドで使用されるエディタスタイルを取得します。
            </summary>
      <param name="context">追加のコンテキスト情報を取得するために使用できる<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <returns>
        <see cref="M:GrapeCity.ActiveReports.Chart.Editors.DoubleArrayEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
        </see>メソッドで使用されるエディタのスタイルを示す<see cref="T:System.Drawing.Design.UITypeEditorEditStyle"></see>値。<see cref="T:System.Drawing.Design.UITypeEditor"></see>がこのメソッドをサポートしていない場合、<see cref="M:GrapeCity.ActiveReports.Chart.Editors.DoubleArrayEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)"></see>は<see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None"></see>を返します。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Editors.DoubleArrayEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
        <see cref="M:GrapeCity.ActiveReports.Chart.Editors.DoubleArrayEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
        </see>メソッドによって指定されるエディタスタイルを使用して、指定されたオブジェクトの値を編集します。
            </summary>
      <param name="context">追加のコンテキスト情報を取得するために使用できる<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <param name="provider">サービスを取得するためにこのエディタが使用できる<see cref="T:System.IServiceProvider"></see>。</param>
      <param name="value">編集するオブジェクト。</param>
      <returns>オブジェクトの新しい値。オブジェクトの値が変更されていない場合に、これは渡されたものと同じオブジェクトを返す必要があります。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Editors.DropDownEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
            指定されたコンテキスト内のオブジェクトの値の表現の描画をサポートできるかどうかを示します。
            </summary>
      <param name="context">追加のコンテキスト情報を取得するために使用できる<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <returns>
        <see cref="M:GrapeCity.ActiveReports.Chart.Editors.DropDownEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
        </see>が実装された場合はtrue。それ以外の場合は、false。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Editors.DropDownEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
      <summary>
            指定された<see cref="T:System.Drawing.Design.PaintValueEventArgs"></see>を使用して、オブジェクトの値の表現を描画します。
            </summary>
      <param name="e">何を描画するかまたはどこを描画するかを示す<see cref="T:System.Drawing.Design.PaintValueEventArgs"></see>。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Editors.DropDownEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <see cref="M:GrapeCity.ActiveReports.Chart.Editors.DropDownEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
        </see>メソッドで使用されるエディタスタイルを取得します。
            </summary>
      <param name="context">追加のコンテキスト情報を取得するために使用できる<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <returns>
        <see cref="M:GrapeCity.ActiveReports.Chart.Editors.DropDownEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
        </see>メソッドで使用されるエディタのスタイルを示す<see cref="T:System.Drawing.Design.UITypeEditorEditStyle"></see>値。<see cref="T:System.Drawing.Design.UITypeEditor"></see>がこのメソッドをサポートしていない場合、<see cref="M:GrapeCity.ActiveReports.Chart.Editors.DropDownEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)"></see>は<see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None"></see>を返します。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Editors.DropDownEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
        <see cref="M:GrapeCity.ActiveReports.Chart.Editors.DropDownEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
        </see>メソッドによって指定されるエディタスタイルを使用して、指定されたオブジェクトの値を編集します。
            </summary>
      <param name="context">追加のコンテキスト情報を取得するために使用できる<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <param name="provider">サービスを取得するためにこのエディタが使用できる<see cref="T:System.IServiceProvider"></see>。</param>
      <param name="value">編集するオブジェクト。</param>
      <returns>オブジェクトの新しい値。オブジェクトの値が変更されていない場合に、これは渡されたものと同じオブジェクトを返す必要があります。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Editors.LabelsCollectionEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <see cref="M:GrapeCity.ActiveReports.Chart.Editors.LabelsCollectionEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
        </see>メソッドで使用されるエディタスタイルを取得します。
            </summary>
      <param name="context">追加のコンテキスト情報を取得するために使用できる<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <returns>
        <see cref="M:GrapeCity.ActiveReports.Chart.Editors.LabelsCollectionEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
        </see>メソッドで使用されるエディタのスタイルを示す<see cref="T:System.Drawing.Design.UITypeEditorEditStyle"></see>値。<see cref="T:System.Drawing.Design.UITypeEditor"></see>がこのメソッドをサポートしていない場合、<see cref="M:GrapeCity.ActiveReports.Chart.Editors.LabelsCollectionEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)"></see>は<see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None"></see>を返します。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Editors.LabelsCollectionEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
        <see cref="M:GrapeCity.ActiveReports.Chart.Editors.LabelsCollectionEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
        </see>メソッドによって指定されるエディタスタイルを使用して、指定されたオブジェクトの値を編集します。
            </summary>
      <param name="context">追加のコンテキスト情報を取得するために使用できる<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <param name="provider">サービスを取得するためにこのエディタが使用できる<see cref="T:System.IServiceProvider"></see>。</param>
      <param name="value">編集するオブジェクト。</param>
      <returns>オブジェクトの新しい値。オブジェクトの値が変更されていない場合に、これは渡されたものと同じオブジェクトを返す必要があります。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.IGraphItem.AttachParent(GrapeCity.ActiveReports.Chart.IGraphItem)">
      <summary>
            親に添付します。
            </summary>
      <param name="parent">親</param>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.IGraphItem.IsDirty">
      <summary>
            ダーティ状態。
            </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.IGraphItem.IsAttachable">
      <summary>
            現在の添付可能な状態。
            </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.IGraphItem.Parent">
      <summary>
            添付されている場合は親を取得します。
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Item.#ctor">
      <summary>
        <see cref="T:GrapeCity.ActiveReports.Chart.Item">
        </see>クラスの新しいインスタンスを初期化します。 
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Item.Destroy(System.Boolean)">
      <summary>
            アンマネージリソースの解放またはリセットに関連付けられているアプリケーション定義のタスクを実行します。
            </summary>
      <param name="descrease">レイアウトフラグを減少します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Item.Clone">
      <summary>
            現在のインスタンスのコピーである新しいオブジェクトを作成します。
            </summary>
      <returns>現在のインスタンスのコピーである新しいオブジェクト。</returns>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Item.IsAttachable">
      <summary>
            現在の添付可能な状態。
            </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Item.IsDirty">
      <summary>
            ダーティ状態。
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.DrawCustomizableItem.#ctor(GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode)">
      <summary>
        <see cref="T:GrapeCity.ActiveReports.Chart.DrawCustomizableItem">
        </see>クラスの新しいインスタンスを初期化します。 
            </summary>
      <param name="antiAliasMode">現在のモード。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.DrawCustomizableItem.AASettingsEqual(GrapeCity.ActiveReports.Chart.DrawCustomizableItem)">
      <summary>
            AntiAliasingモードが同じかどうかを確認します。
            </summary>
      <param name="itemToCompare">比較する項目。</param>
      <returns>等しい場合は、True。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.MouseEnabledItem.#ctor(GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode)">
      <summary>
        <see cref="T:GrapeCity.ActiveReports.Chart.MouseEnabledItem">
        </see>クラスの新しいインスタンスを初期化します。 
            </summary>
      <param name="antiAliasMode">現在のモード。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.MouseEnabledItem.NeedMouseHandling">
      <summary>
            マウス操作が必要かどうか確認します。
            </summary>
      <returns>マウス操作が必要な場合はTrue。</returns>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.INamedComponent">
      <summary>
            名前を持つコンポーネント。
            </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.INamedComponent.Name">
      <summary>
            コンポーネントの名前を取得または設定します。
            </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.MouseEnabledComponent.Name">
      <summary>
            コンポーネントの名前を取得または設定します。
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.AxisBase.CheckPropertiesValidityImpl(GrapeCity.ActiveReports.Chart.SharpGraph)">
      <summary>
            項目がプロパティ間の依存関係をチェックする必要がある場合は、このメソッドをオーバーライドする必要があります。
　　　　　　　　　　　　デフォルトでは何もしません
　　　　　　　　　　　　エラーが発生した場合、メソッドはArgumentExceptionをスローする必要があります
            </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Axis.IsDirty">
      <summary>
            ダーティ状態。
            </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.CustomAxis.IsDirty">
      <summary>
            ダーティ状態。
            </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.ItemComponent">
      <summary>
            領域スクロールと凡例項目用の基本クラス。
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.ItemComponent.Dispose">
      <summary>
            アンマネージリソースの解放またはリセットに関連付けられているアプリケーション定義のタスクを実行します。
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.ItemComponent.ToString">
      <summary>
            現在のオブジェクトを表す文字列を返します。
            </summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.ItemComponent.Name">
      <summary>
            コンポーネントの名前を取得または設定します。
            </summary>
    </member>
    <member name="E:GrapeCity.ActiveReports.Chart.ItemComponent.Disposed">
      <summary>
            インスタンスが解放されたときに発生します。
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.NotifyOnAnyPropertyChange(System.Object)">
      <summary>
            通知メッソド。
            </summary>
      <param name="newValue">新しいプロパティの値。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.TxExpandableObjectConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>
            値パラメーターによって指定されたオブジェクト型のプロパティのコレクションを取得します。
            </summary>
      <param name="context">フォーマットコンテキストを提供する<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <param name="value">
      </param>
      <param name="attributes">プロパティを取得するオブジェクトの型を指定する<see cref="T:System.Object"></see>。</param>
      <returns>フィルターとして使用されるSystem.Attribute型の配列。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.Converter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>
            指定されたコンテキストと属性を使用して、値パラメータによって指定された配列型のプロパティのコレクションを返します。
            </summary>
      <param name="context">フォーマットコンテキストを提供する<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <param name="value">プロパティを取得するオブジェクトの型を指定する<see cref="T:System.Object"></see>。</param>
      <param name="attributes">フィルターとして使用される<see cref="T:System.Attribute"></see>型の配列。</param>
      <returns>指定されたデータ型に対して公開されているプロパティを格納している<see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see>。プロパティが格納されていない場合はnull。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            指定されたコンテキストを使用して、このコンバータが指定された型のオブジェクトをこのコンバータの型に変換できるかどうかを返します。
            </summary>
      <param name="context">フォーマットコンテキストを提供する<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <param name="sourceType">変換したい型を表す<see cref="T:System.Type"></see>。</param>
      <returns>このコンバータが変換を実行できる場合は、true。それ以外の場合は、false。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
            指定されたコンテキストおよびカルチャ情報を使用して、指定されたオブジェクトをこのコンバーターの型に変換します。
            </summary>
      <param name="context">フォーマットコンテキストを提供する<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <param name="culture">現在のカルチャとして使用するCultureInfo。</param>
      <param name="value">変換するObject。</param>
      <returns>変換された値を表すObject。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
            指定されたコンテキストおよびカルチャ情報を使用して、指定された値オブジェクトを指定された型に変換します。
            </summary>
      <param name="context">フォーマットコンテキストを提供する<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <param name="culture">CultureInfoです。 nullが渡される場合は、現在のカルチャが想定されます。</param>
      <param name="value">変換するObject。</param>
      <param name="destinationType">変換したい型を表す<see cref="T:System.Type"></see>。</param>
      <returns>変換された値を表すObject。</returns>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.GradientEditor">
      <summary>
            内部使用のみ。
            </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.PatternEditor">
      <summary>
            内部使用のみ。
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Border.Converter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>
            指定されたコンテキストと属性を使用して、値パラメータによって指定された配列型のプロパティのコレクションを返します。
            </summary>
      <param name="context">フォーマットコンテキストを提供する<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <param name="value">プロパティを取得するオブジェクトの型を指定する<see cref="T:System.Object"></see>。</param>
      <param name="attributes">フィルターとして使用される<see cref="T:System.Attribute"></see>型の配列。</param>
      <returns>指定されたデータ型に対して公開されているプロパティを格納している<see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see>。プロパティが格納されていない場合はnull。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Border.Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            指定されたコンテキストを使用して、このコンバータが指定された型のオブジェクトをこのコンバータの型に変換できるかどうかを返します。
            </summary>
      <param name="context">フォーマットコンテキストを提供する<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <param name="sourceType">変換したい型を表す<see cref="T:System.Type"></see>。</param>
      <returns>このコンバータが変換を実行できる場合は、true。それ以外の場合は、false。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Border.Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
            指定されたコンテキストおよびカルチャ情報を使用して、指定されたオブジェクトをこのコンバーターの型に変換します。
            </summary>
      <param name="context">フォーマットコンテキストを提供する<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <param name="culture">現在のカルチャとして使用するCultureInfo。</param>
      <param name="value">変換するObject。</param>
      <returns>変換された値を表すObject。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Border.Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
            指定されたコンテキストおよびカルチャ情報を使用して、指定された値オブジェクトを指定された型に変換します。
            </summary>
      <param name="context">フォーマットコンテキストを提供する<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <param name="culture">CultureInfoです。 nullが渡される場合は、現在のカルチャが想定されます。</param>
      <param name="value">変換するObject。</param>
      <param name="destinationType">変換したい型を表す<see cref="T:System.Type"></see>。</param>
      <returns>変換された値を表すObject。</returns>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.DrawCustomizableComponent">
      <summary>
            グラフ領域と凡例の基底クラス。
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.DrawCustomizableComponent.Dispose">
      <summary>
            アンマネージリソースの解放またはリセットに関連付けられているアプリケーション定義のタスクを実行します。
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.DrawCustomizableComponent.ToString">
      <summary>
            現在のオブジェクトを表す文字列を返します。
            </summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.DrawCustomizableComponent.Name">
      <summary>
            コンポーネントの名前を取得または設定します。
            </summary>
    </member>
    <member name="E:GrapeCity.ActiveReports.Chart.DrawCustomizableComponent.Disposed">
      <summary>
            コンポーネントが解放された場合にスローされます。
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.ColorPaletteTypeConverter.#ctor">
      <summary>
        <see cref="T:GrapeCity.ActiveReports.Chart.ColorPaletteTypeConverter">
        </see>クラスの新しいインスタンスを初期化します。 
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.ColorPaletteTypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
            オブジェクトが指定されたコンテキストを使用して、リストから選択できる標準値セットをサポートするかどうかを示す値を返します。
            </summary>
      <param name="context">フォーマットコンテキストを提供する<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <returns>オブジェクトがサポートしている標準値セットを検索するために<see cref="M:GrapeCity.ActiveReports.Chart.ColorPaletteTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)"></see>を呼び出す必要がある場合はtrue。それ以外の場合はfalse。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.ColorPaletteTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
            書式指定コンテキストが指定されている場合、型コンバータがデザインされた対象のデータ型の標準値のコレクションを返します。
            </summary>
      <param name="context">書式指定コンテキストを提供する<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。このパラメータは、コンバータが呼び出される環境に関する追加情報を抽出するために使用できます。このパラメータまたはこのパラメータのプロパティには、nullを指定できます。</param>
      <returns>有効値の標準セットを保持している<see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"></see>。データ型が標準値セットをサポートしていない場合はnull。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.ColorPaletteTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            指定されたコンテキストを使用して、このコンバータが指定された型のオブジェクトをこのコンバータの型に変換できるかどうかを返します。
            </summary>
      <param name="context">フォーマットコンテキストを提供する<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <param name="sourceType">変換したい型を表す<see cref="T:System.Type"></see>。</param>
      <returns>このコンバータが変換を実行できる場合は、true。それ以外の場合は、false。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.ColorPaletteTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
            指定されたコンテキストおよびカルチャ情報を使用して、指定されたオブジェクトをこのコンバーターの型に変換します。
            </summary>
      <param name="context">フォーマットコンテキストを提供する<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <param name="culture">現在のカルチャとして使用するCultureInfo。</param>
      <param name="value">変換するObject。</param>
      <returns>変換された値を表すObject。</returns>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.CustomProperties.IsDirty">
      <summary>
            このメンバは<code>Item.IsDirty</code>をオーバーライドします。常にfalseです。
            </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.DataPoint.IsDirty">
      <summary>
            このメンバは<code>Item.IsDirty</code>をオーバーライドします。常にfalseです。
            </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.DoubleArray.IsDirty">
      <summary>
            このメンバは<code>Item.IsDirty</code>をオーバーライドします。常にfalseです。
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.DoubleArray.Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
            指定されたコンテキストを使用して、このコンバータがオブジェクトを指定された型に変換できるかどうかを返します。
            </summary>
      <param name="context">フォーマットコンテキストを提供する<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <param name="destinationType">変換したい型を表す<see cref="T:System.Type"></see>。</param>
      <returns>このコンバータが変換を実行できる場合は、true。それ以外の場合は、false。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.DoubleArray.Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
            指定されたコンテキストおよびカルチャ情報を使用して、指定されたオブジェクトをこのコンバーターの型に変換します。
            </summary>
      <param name="context">フォーマットコンテキストを提供する<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <param name="culture">現在のカルチャとして使用するCultureInfo。</param>
      <param name="value">変換するObject。</param>
      <returns>変換された値を表すObject。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.DoubleArray.Converter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            指定されたコンテキストを使用して、このコンバータがオブジェクトを指定された型に変換できるかどうかを返します。
            </summary>
      <param name="context">フォーマットコンテキストを提供する<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <param name="destinationType">変換したい型を表す<see cref="T:System.Type"></see>。</param>
      <returns>このコンバータが変換を実行できる場合は、true。それ以外の場合は、false。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.DoubleArray.Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            指定されたコンテキストを使用して、このコンバータが指定された型のオブジェクトをこのコンバータの型に変換できるかどうかを返します。
            </summary>
      <param name="context">フォーマットコンテキストを提供する<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <param name="sourceType">変換したい型を表す<see cref="T:System.Type"></see>。</param>
      <returns>このコンバータが変換を実行できる場合は、true。それ以外の場合は、false。</returns>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.DataPointsCollection.Count">
      <summary>
            DataPointsCollectionインスタンスに含まれる要素の数を取得します。
            </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.DataPointsCollection.Capacity">
      <summary>
            DataPointsCollectionが含むことができる要素の数を取得または設定します。
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.DataPointsCollection.Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
            指定されたコンテキストおよびカルチャ情報を使用して、指定された値オブジェクトを指定された型に変換します。
            </summary>
      <param name="context">フォーマットコンテキストを提供する<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <param name="culture">CultureInfoです。 nullが渡される場合は、現在のカルチャが想定されます。</param>
      <param name="value">変換するObject。</param>
      <param name="destinationType">変換したい型を表す<see cref="T:System.Type"></see>。</param>
      <returns>変換された値を表すObject。</returns>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.GridLayout.IsDirty">
      <summary>
            このメンバは<code>Item.IsDirty</code>をオーバーライドします。常にfalseです。
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.GridLayout.Converter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>
            指定されたコンテキストと属性を使用して、値パラメータによって指定された配列型のプロパティのコレクションを返します。
            </summary>
      <param name="context">フォーマットコンテキストを提供する<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <param name="value">プロパティを取得するオブジェクトの型を指定する<see cref="T:System.Object"></see>。</param>
      <param name="attributes">フィルターとして使用される<see cref="T:System.Attribute"></see>型の配列。</param>
      <returns>指定されたデータ型に対して公開されているプロパティを格納している<see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see>。プロパティが格納されていない場合はnull。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.GridLayout.Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            指定されたコンテキストを使用して、このコンバータが指定された型のオブジェクトをこのコンバータの型に変換できるかどうかを返します。
            </summary>
      <param name="context">フォーマットコンテキストを提供する<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <param name="sourceType">変換したい型を表す<see cref="T:System.Type"></see>。</param>
      <returns>このコンバータが変換を実行できる場合は、true。それ以外の場合は、false。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.GridLayout.Converter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            指定されたコンテキストを使用して、このコンバータがオブジェクトを指定された型に変換できるかどうかを返します。
            </summary>
      <param name="context">フォーマットコンテキストを提供する<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <param name="destinationType">変換したい型を表す<see cref="T:System.Type"></see>。</param>
      <returns>このコンバータが変換を実行できる場合は、true。それ以外の場合は、false。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.GridLayout.Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
            指定されたコンテキストおよびカルチャ情報を使用して、指定されたオブジェクトをこのコンバーターの型に変換します。
            </summary>
      <param name="context">フォーマットコンテキストを提供する<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <param name="culture">現在のカルチャとして使用するCultureInfo。</param>
      <param name="value">変換するObject。</param>
      <returns>変換された値を表すObject。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.GridLayout.Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
            指定されたコンテキストおよびカルチャ情報を使用して、指定された値オブジェクトを指定された型に変換します。
            </summary>
      <param name="context">フォーマットコンテキストを提供する<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <param name="culture">CultureInfoです。 nullが渡される場合は、現在のカルチャが想定されます。</param>
      <param name="value">変換するObject。</param>
      <param name="destinationType">変換したい型を表す<see cref="T:System.Type"></see>。</param>
      <returns>変換された値を表すObject。</returns>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext">
      <summary>
            DirectionType、ドキュメントなどのようなシリアル化に関するコンテキスト情報を表します。
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext.#ctor(GrapeCity.ActiveReports.Chart.SharpGraph,GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext.DirectionType,System.Xml.XmlDocument,System.Boolean)">
      <summary>
            GraphXmlSerializationContextクラスの新しいインスタンスを初期化します。
            </summary>
      <param name="sharpGraph">SharpGraphコントロール。</param>
      <param name="direction">シリアル化する方向-xmlからまたは、xmlに</param>
      <param name="doc">XmlDocument。</param>
      <param name="includeData">
      </param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext.#ctor(GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext.DirectionType,System.Xml.XmlDocument,System.Boolean,System.Boolean)">
      <summary>
            GraphXmlSerializationContextクラスの新しいインスタンスを初期化します。
            </summary>
      <param name="direction">シリアル化する方向-xmlからまたは、xmlに</param>
      <param name="doc">XmlDocument。</param>
      <param name="includeData">
      </param>
      <param name="useComponentReferences">
      </param>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext.Direction">
      <summary>
            シリアル化する方向-xmlからまたは、xmlに
            </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext.DirectionType">
      <summary>
            シリアル化する方向-xmlからまたは、xmlに
            </summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext.DirectionType.ToXml">
      <summary>
            オブジェクトの状態からxmlに
            </summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext.DirectionType.FromXml">
      <summary>
            xmlからオブジェクトの状態に
            </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Light.IsDirty">
      <summary>
            このメンバは<code>Item.IsDirty</code>をオーバーライドします。常にfalseです。
            </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.Projection.IsDirty">
      <summary>
            このメンバは<code>Item.IsDirty</code>をオーバーライドします。常にfalseです。
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.GraphReferenceConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            指定されたコンテキストを使用して、このコンバータが指定された型のオブジェクトをこのコンバータの型に変換できるかどうかを返します。
            </summary>
      <param name="context">フォーマットコンテキストを提供する<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <param name="sourceType">変換したい型を表す<see cref="T:System.Type"></see>。</param>
      <returns>このコンバータが変換を実行できる場合は、true。それ以外の場合は、false。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.GraphReferenceConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            指定されたコンテキストを使用して、このコンバータがオブジェクトを指定された型に変換できるかどうかを返します。
            </summary>
      <param name="context">フォーマットコンテキストを提供する<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <param name="destinationType">変換したい型を表す<see cref="T:System.Type"></see>。</param>
      <returns>このコンバータが変換を実行できる場合は、true。それ以外の場合は、false。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.GraphReferenceConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
            指定されたコンテキストおよびカルチャ情報を使用して、指定されたオブジェクトをこのコンバーターの型に変換します。
            </summary>
      <param name="context">フォーマットコンテキストを提供する<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <param name="culture">現在のカルチャとして使用するCultureInfo。</param>
      <param name="value">変換するObject。</param>
      <returns>変換された値を表すObject。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.GraphReferenceConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
            指定されたコンテキストおよびカルチャ情報を使用して、指定された値オブジェクトを指定された型に変換します。
            </summary>
      <param name="context">フォーマットコンテキストを提供する<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <param name="culture">CultureInfoです。 nullが渡される場合は、現在のカルチャが想定されます。</param>
      <param name="value">変換するObject。</param>
      <param name="destinationType">変換したい型を表す<see cref="T:System.Type"></see>。</param>
      <returns>変換された値を表すObject。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.GraphReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
            書式指定コンテキストが指定されている場合、型コンバータがデザインされた対象のデータ型の標準値のコレクションを返します。
            </summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。このパラメータは、コンバータが呼び出される環境に関する追加情報を抽出するために使用できます。このパラメータまたはこのパラメータのプロパティには、nullを指定できます。</param>
      <returns>書式指定コンテキストが指定されている場合、型コンバータがデザインされた対象のデータ型の標準値のコレクションを返します。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.GraphReferenceConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
            指定したコンテキストを使用して、GetStandardValuesから返された標準値のコレクションが有効値の排他的なリストかどうかを示す値を返します。
            </summary>
      <param name="context">フォーマットコンテキストを提供する<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <returns>GetStandardValuesから返された TypeConverter.StandardValuesCollectionが、有効値の排他的なリストの場合は true。他の値も有効である場合は false。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.GraphReferenceConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
            指定したコンテキストを使用して、リストから選択できる標準値セットをオブジェクトがサポートするかどうかを示す値を返します。
            </summary>
      <param name="context">フォーマットコンテキストを提供する<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <returns>オブジェクトがサポートしている標準値セットを検索するためにGetStandardValuesを呼び出す必要がある場合はtrue。それ以外の場合はfalse。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.SharpGraph.DataSourceConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            指定されたコンテキストを使用して、このコンバータが指定された型のオブジェクトをこのコンバータの型に変換できるかどうかを返します。
            </summary>
      <param name="context">フォーマットコンテキストを提供する<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <param name="sourceType">変換したい型を表す<see cref="T:System.Type"></see>。</param>
      <returns>このコンバータが変換を実行できる場合は、true。それ以外の場合は、false。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.SharpGraph.DataSourceConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            指定されたコンテキストを使用して、このコンバータがオブジェクトを指定された型に変換できるかどうかを返します。
            </summary>
      <param name="context">フォーマットコンテキストを提供する<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <param name="destinationType">変換したい型を表す<see cref="T:System.Type"></see>。</param>
      <returns>このコンバータが変換を実行できる場合は、true。それ以外の場合は、false。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.SharpGraph.DataSourceConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
            指定されたコンテキストおよびカルチャ情報を使用して、指定されたオブジェクトをこのコンバーターの型に変換します。
            </summary>
      <param name="context">フォーマットコンテキストを提供する<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <param name="culture">現在のカルチャとして使用するCultureInfo。</param>
      <param name="value">変換するObject。</param>
      <returns>変換された値を表すObject。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.SharpGraph.DataSourceConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
            指定されたコンテキストおよびカルチャ情報を使用して、指定された値オブジェクトを指定された型に変換します。
            </summary>
      <param name="context">フォーマットコンテキストを提供する<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <param name="culture">CultureInfoです。 nullが渡される場合は、現在のカルチャが想定されます。</param>
      <param name="value">変換するObject。</param>
      <param name="destinationType">変換したい型を表す<see cref="T:System.Type"></see>。</param>
      <returns>変換された値を表すObject。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.DoubleConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
            指定されたコンテキストおよびカルチャ情報を使用して、指定されたオブジェクトをこのコンバーターの型に変換します。
            </summary>
      <param name="context">フォーマットコンテキストを提供する<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <param name="culture">現在のカルチャとして使用するCultureInfo。</param>
      <param name="value">変換するObject。</param>
      <returns>変換された値を表すObject。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.DoubleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
            指定されたコンテキストおよびカルチャ情報を使用して、指定された値オブジェクトを指定された型に変換します。
            </summary>
      <param name="context">フォーマットコンテキストを提供する<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <param name="culture">CultureInfoです。 nullが渡される場合は、現在のカルチャが想定されます。</param>
      <param name="value">変換するObject。</param>
      <param name="destinationType">変換したい型を表す<see cref="T:System.Type"></see>。</param>
      <returns>変換された値を表すObject。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.DoubleConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            指定されたコンテキストを使用して、このコンバータが指定された型のオブジェクトをこのコンバータの型に変換できるかどうかを返します。
            </summary>
      <param name="context">フォーマットコンテキストを提供する<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <param name="sourceType">変換したい型を表す<see cref="T:System.Type"></see>。</param>
      <returns>このコンバータが変換を実行できる場合は、true。それ以外の場合は、false。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.DoubleConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            指定されたコンテキストを使用して、このコンバータがオブジェクトを指定された型に変換できるかどうかを返します。
            </summary>
      <param name="context">フォーマットコンテキストを提供する<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <param name="destinationType">変換したい型を表す<see cref="T:System.Type"></see>。</param>
      <returns>このコンバータが変換を実行できる場合は、true。それ以外の場合は、false。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.DoubleConverterWithAuto.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
            指定されたコンテキストおよびカルチャ情報を使用して、指定されたオブジェクトをこのコンバーターの型に変換します。
            </summary>
      <param name="context">フォーマットコンテキストを提供する<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <param name="culture">現在のカルチャとして使用するCultureInfo。</param>
      <param name="value">変換するObject。</param>
      <returns>変換された値を表すObject。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.DoubleConverterWithAuto.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
            指定されたコンテキストおよびカルチャ情報を使用して、指定された値オブジェクトを指定された型に変換します。
            </summary>
      <param name="context">フォーマットコンテキストを提供する<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <param name="culture">CultureInfoです。 nullが渡される場合は、現在のカルチャが想定されます。</param>
      <param name="value">変換するObject。</param>
      <param name="destinationType">変換したい型を表す<see cref="T:System.Type"></see>。</param>
      <returns>変換された値を表すObject。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.DoubleConverterWithAuto.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
            指定したコンテキストを使用して、リストから選択できる標準値セットをオブジェクトがサポートするかどうかを示す値を返します。
            </summary>
      <param name="context">フォーマットコンテキストを提供する<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <returns>オブジェクトがサポートしている標準値セットを検索するためにGetStandardValuesを呼び出す必要がある場合はtrue。それ以外の場合はfalse。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.DoubleConverterWithAuto.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
            指定したコンテキストを使用して、GetStandardValuesから返された標準値のコレクションが有効値の排他的なリストかどうかを示す値を返します。
            </summary>
      <param name="context">フォーマットコンテキストを提供する<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <returns>GetStandardValuesから返された TypeConverter.StandardValuesCollectionが、有効値の排他的なリストの場合は true。他の値も有効である場合は false。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.DoubleConverterWithAuto.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
            書式指定コンテキストが指定されている場合、型コンバータがデザインされた対象のデータ型の標準値のコレクションを返します。
            </summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。このパラメータは、コンバータが呼び出される環境に関する追加情報を抽出するために使用できます。このパラメータまたはこのパラメータのプロパティには、nullを指定できます。</param>
      <returns>書式指定コンテキストが指定されている場合、型コンバータがデザインされた対象のデータ型の標準値のコレクションを返します。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.FloatConverterWithAuto.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
            指定されたコンテキストおよびカルチャ情報を使用して、指定されたオブジェクトをこのコンバーターの型に変換します。
            </summary>
      <param name="context">フォーマットコンテキストを提供する<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <param name="culture">現在のカルチャとして使用するCultureInfo。</param>
      <param name="value">変換するObject。</param>
      <returns>変換された値を表すObject。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.FloatConverterWithAuto.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
            指定されたコンテキストおよびカルチャ情報を使用して、指定された値オブジェクトを指定された型に変換します。
            </summary>
      <param name="context">フォーマットコンテキストを提供する<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <param name="culture">CultureInfoです。 nullが渡される場合は、現在のカルチャが想定されます。</param>
      <param name="value">変換するObject。</param>
      <param name="destinationType">変換したい型を表す<see cref="T:System.Type"></see>。</param>
      <returns>変換された値を表すObject。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.FloatConverterWithAuto.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
            指定したコンテキストを使用して、リストから選択できる標準値セットをオブジェクトがサポートするかどうかを示す値を返します。
            </summary>
      <param name="context">フォーマットコンテキストを提供する<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <returns>オブジェクトがサポートしている標準値セットを検索するためにGetStandardValuesを呼び出す必要がある場合はtrue。それ以外の場合はfalse。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.FloatConverterWithAuto.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
            指定したコンテキストを使用して、GetStandardValuesから返された標準値のコレクションが有効値の排他的なリストかどうかを示す値を返します。
            </summary>
      <param name="context">フォーマットコンテキストを提供する<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <returns>GetStandardValuesから返された TypeConverter.StandardValuesCollectionが、有効値の排他的なリストの場合は true。他の値も有効である場合は false。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.FloatConverterWithAuto.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
            書式指定コンテキストが指定されている場合、型コンバータがデザインされた対象のデータ型の標準値のコレクションを返します。
            </summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。このパラメータは、コンバータが呼び出される環境に関する追加情報を抽出するために使用できます。このパラメータまたはこのパラメータのプロパティには、nullを指定できます。</param>
      <returns>書式指定コンテキストが指定されている場合、型コンバータがデザインされた対象のデータ型の標準値のコレクションを返します。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.FloatConverterWithAuto.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            指定されたコンテキストを使用して、このコンバータが指定された型のオブジェクトをこのコンバータの型に変換できるかどうかを返します。
            </summary>
      <param name="context">フォーマットコンテキストを提供する<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <param name="sourceType">変換したい型を表す<see cref="T:System.Type"></see>。</param>
      <returns>このコンバータが変換を実行できる場合は、true。それ以外の場合は、false。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.FloatConverterWithAuto.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            指定されたコンテキストを使用して、このコンバータがオブジェクトを指定された型に変換できるかどうかを返します。
            </summary>
      <param name="context">フォーマットコンテキストを提供する<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <param name="destinationType">変換したい型を表す<see cref="T:System.Type"></see>。</param>
      <returns>このコンバータが変換を実行できる場合は、true。それ以外の場合は、false。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Point2d.op_Equality(GrapeCity.ActiveReports.Chart.Graphics.Point2d,GrapeCity.ActiveReports.Chart.Graphics.Point2d)">
      <summary>
            指定された2つのPoint2dが等しいかどうかをチェックします。
            </summary>
      <param name="a">チェックする１つ目のPoint2d。</param>
      <param name="b">チェックする２つ目のPoint2d。</param>
      <returns>2つのPoint2dが等しい場合は、<c>True</c>。それ以外の場合は、<c>False</c>。</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Point2d.op_Inequality(GrapeCity.ActiveReports.Chart.Graphics.Point2d,GrapeCity.ActiveReports.Chart.Graphics.Point2d)">
      <summary>
            指定された2つのPoint2dが異なるかどうかをチェックします。
            </summary>
      <param name="a">チェックする１つ目のPoint2d。</param>
      <param name="b">チェックする２つ目のPoint2d。</param>
      <returns>２つのPoint2dが異なる場合は、<c>True</c>。それ以外の場合は、<c>False</c>。</returns>
    </member>
    <member name="F:GrapeCity.ActiveReports.Chart.ColorPalette.Iceburg">
      <summary>
            アイスバーグ内の薄い青からグレーに及びます。
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.ICustomPropertyValueValidator.GetAnyValidValue">
      <summary>
            有効な値を取得します。
            </summary>
      <returns>
        <see cref="T:System.Object">
        </see>のインスタンス。</returns>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.DoubleArray.Converter">
      <summary>
        <see cref="T:GrapeCity.ActiveReports.Chart.DoubleArray">
        </see>クラスのインスタンスの変換を処理する方法を提供します。
            </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.DataPointsCollection.Converter">
      <summary>
        <see cref="T:GrapeCity.ActiveReports.Chart.DataPointsCollection">
        </see>クラスのインスタンスの変換を処理する方法を提供します。
            </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext.Doc">
      <summary>
            XmlDocumentを取得します。
            </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext.RegisteredComponents">
      <summary>
            登録されたコンポーネントのコレクションを取得します。
            </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext.IncludeData">
      <summary>
            ポイントが含まれるかどうかを判定するフラグを取得します。
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.NullableBoolean.CompareTo(GrapeCity.ActiveReports.Chart.NullableBoolean)">
      <summary>
            現在のインスタンスと<see cref="T:GrapeCity.ActiveReports.Chart.NullableBoolean"></see>の指定されたインスタンスの比較を実行して、インスタンスが別のインスタンスより小さいか、等しいかまたは大きいかを示す値を返します。
            </summary>
      <param name="other">比較する<see cref="T:GrapeCity.ActiveReports.Chart.NullableBoolean"></see>のインスタンス。</param>
      <returns>現在のインスタンスが他のインスタンスより小さい場合は0 より小さい、等しい場合は、0 （ゼロ）。現在のインスタンスが他のインスタンスより大きい場合は、0 より大きいです。</returns>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.GraphReferenceConverter">
      <summary>
            変換を処理するための統一的な方法を提供します。
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.GraphReferenceConverter.findAvailableComponents(GrapeCity.ActiveReports.Chart.IGraphItem)">
      <summary>
            使用可能なコンポーネントを検索します。
            </summary>
      <param name="startSearchItem">検索中に、どこから項目の検索が開始するかを指定します。</param>
      <returns>
      </returns>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.DoubleConverterWithAuto">
      <summary>
            "自動計算"値のサポートでDouble用のコンバータです。
            </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Chart.FloatConverterWithAuto">
      <summary>
            "自動計算"値のサポートでFloat用のコンバータです。
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.InternalC.StdCollectionTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
            指定されたコンテキストおよびカルチャ情報を使用して、指定された値オブジェクトを指定された型に変換します。内部使用のみ。
            </summary>
      <param name="context">フォーマットコンテキストを提供する<see cref="T:System.ComponentModel.ITypeDescriptorContext"></see>。</param>
      <param name="culture">CultureInfoです。 nullが渡される場合は、現在のカルチャが想定されます。</param>
      <param name="value">変換するObject。</param>
      <param name="destinationType">変換したい型を表す<see cref="T:System.Type"></see>。</param>
      <returns>変換された値を表すObject。</returns>
    </member>
    <member name="P:GrapeCity.ActiveReports.Chart.ChartArea.SeriesLine">
      <summary>
            区分線です。
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Line.Converter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>初期化コードをリソースではなくフォームに格納する必要があります。</summary>
    </member>
  </members>
</doc>